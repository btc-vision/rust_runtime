import * as env from 'env';

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1048576, "BwAAAAwAAAAEAAAACAAAAAkAAAAKAAAAYWxsb2Mvc3JjL3Jhd192ZWMucnMYABAAFAAAABgAAAAF");
  base64DecodeToExistingUint8Array(bufferView, 1048644, "AQAAAAsAAABhIGZvcm1hdHRpbmcgdHJhaXQgaW1wbGVtZW50YXRpb24gcmV0dXJuZWQgYW4gZXJyb3Igd2hlbiB0aGUgdW5kZXJseWluZyBzdHJlYW0gZGlkIG5vdGFsbG9jL3NyYy9mbXQucnMAAKIAEAAQAAAAfgIAAA4AAABbOiAAAQAAAAAAAADFABAAAgAAAAAAAAAMAAAABAAAAAwAAAANAAAADgAAACAgICAsICwKCl1jb3JlL3NyYy9mbXQvbnVtLnJzAAAA+gAQABMAAABmAAAAFwAAADB4MDAwMTAyMDMwNDA1MDYwNzA4MDkxMDExMTIxMzE0MTUxNjE3MTgxOTIwMjEyMjIzMjQyNTI2MjcyODI5MzAzMTMyMzMzNDM1MzYzNzM4Mzk0MDQxNDI0MzQ0NDU0NjQ3NDg0OTUwNTE1MjUzNTQ1NTU2NTc1ODU5NjA2MTYyNjM2NDY1NjY2NzY4Njk3MDcxNzI3Mzc0NzU3Njc3Nzg3OTgwODE4MjgzODQ4NTg2ODc4ODg5OTA5MTkyOTM5NDk1OTY5Nzk4OTlyYW5nZSBzdGFydCBpbmRleCAgb3V0IG9mIHJhbmdlIGZvciBzbGljZSBvZiBsZW5ndGggAADqARAAEgAAAPwBEAAiAAAAcmFuZ2UgZW5kIGluZGV4IDACEAAQAAAA/AEQACIAAABjYXBhY2l0eSBvdmVyZmxvdwAAAFACEAARAAAAL3J1c3RjL2M2ZGIxY2EzYzkzYWQ2OTY5MmE0YzRiNTU0MmYyNmZkYTRiZjNhZWMvbGlicmFyeS9hbGxvYy9zcmMvdmVjL3NwZWNfZnJvbV9pdGVyX25lc3RlZC5ycwAAbAIQAF4AAAA5AAAAEgAAAC9ydXN0Yy9jNmRiMWNhM2M5M2FkNjk2OTJhNGM0YjU1NDJmMjZmZGE0YmYzYWVjL2xpYnJhcnkvYWxsb2Mvc3JjL3ZlYy9tb2QucnPcAhAATAAAAD8MAAANAAAAc3JjXG1lbS5ycwAAOAMQAAoAAAAeAAAAFwAAAEV4ZWN1dGU6IAAAAFQDEAAJAAAAU2V0IGVudmlyb25tZW50OiAAAABoAxAAEQAAAE9uIGRlcGxveTogAIQDEAALAAAATWVtIHNpemU6IAAAmAMQAAoAAAAvcnVzdC9kZXBzL2RsbWFsbG9jLTAuMi42L3NyYy9kbG1hbGxvYy5yc2Fzc2VydGlvbiBmYWlsZWQ6IHBzaXplID49IHNpemUgKyBtaW5fb3ZlcmhlYWQArAMQACkAAACoBAAACQAAAGFzc2VydGlvbiBmYWlsZWQ6IHBzaXplIDw9IHNpemUgKyBtYXhfb3ZlcmhlYWQAAKwDEAApAAAArgQAAA0AAABFcnJvcg==");
  base64DecodeToExistingUint8Array(bufferView, 1049696, "BA==");
}
function wasm2js_trap() { throw new Error('abort'); }

function asmFunc(imports) {
 var buffer = new ArrayBuffer(1114112);
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var env = imports.env;
 var fimport$0 = env.log;
 var global$0 = 1048576;
 var global$1 = 1050173;
 var global$2 = 1050176;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 function $0($0_1) {
  $0_1 = $0_1 | 0;
  if (!$0_1) {
   $1()
  }
  wasm2js_trap();
 }
 
 function $1() {
  var $0_1 = 0;
  $0_1 = global$0 - 32 | 0;
  global$0 = $0_1;
  HEAP32[($0_1 + 24 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 1;
  HEAP32[($0_1 + 8 | 0) >> 2] = 1049188;
  HEAP32[($0_1 + 16 | 0) >> 2] = 4;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  $2($0_1 + 8 | 0 | 0, 1048620 | 0);
  wasm2js_trap();
 }
 
 function $2($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $4_1 = 0, $13_1 = 0, $19_1 = 0, $25_1 = 0, $34_1 = 0, $38_1 = 0, $45_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $2_1 + 16 | 0;
  i64toi32_i32$2 = $0_1 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[i64toi32_i32$0 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $4_1 = $2_1 + 8 | 0;
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($2_1 + 28 | 0) >> 1] = 1;
  HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $25_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[i64toi32_i32$0 >> 2] = $25_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $0_1 = global$0 - 32 | 0;
  global$0 = $0_1;
  $1_1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $34_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $34_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $38_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $38_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $45_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[$0_1 >> 2] = $45_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) {
     case 0:
      if ($3_1) {
       break label$2
      }
      $3_1 = 1;
      break label$1;
     case 1:
      break label$3;
     default:
      break label$2;
     };
    }
    if ($3_1) {
     break label$2
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    break label$1;
   }
   HEAP32[$1_1 >> 2] = -2147483648;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   $0_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $2_1 = HEAPU8[($0_1 + 28 | 0) >> 0] | 0;
   HEAPU8[($0_1 + 29 | 0) >> 0] | 0;
   $55($1_1 | 0, 5 | 0, $2_1 | 0);
   wasm2js_trap();
  }
  HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$1_1 >> 2] = $3_1;
  $0_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = HEAPU8[($0_1 + 28 | 0) >> 0] | 0;
  HEAPU8[($0_1 + 29 | 0) >> 0] | 0;
  $55($1_1 | 0, 6 | 0, $2_1 | 0);
  wasm2js_trap();
 }
 
 function $3($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $39_1 = 0, $30_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $2_1 = $1_1 + $2_1 | 0;
  if ($1_1 >>> 0 > $2_1 >>> 0) {
   $0(0 | 0);
   wasm2js_trap();
  }
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  $4_1 = $1_1 << 1 | 0;
  $2_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $2_1;
  $2_1 = $2_1 >>> 0 <= 8 >>> 0 ? 8 : $2_1;
  if (($2_1 | 0) < (0 | 0)) {
   $0(0 | 0);
   wasm2js_trap();
  }
  $30_1 = $3_1;
  if ($1_1) {
   HEAP32[($3_1 + 28 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $39_1 = 1;
  } else {
   $39_1 = 0
  }
  HEAP32[($30_1 + 24 | 0) >> 2] = $39_1;
  $4($3_1 + 8 | 0 | 0, $2_1 | 0, $3_1 + 20 | 0 | 0);
  if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == (1 | 0)) {
   HEAP32[($3_1 + 16 | 0) >> 2] | 0;
   $0(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
   wasm2js_trap();
  }
  $1_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  global$0 = $3_1 + 32 | 0;
 }
 
 function $4($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  label$1 : {
   if (HEAP32[($2_1 + 4 | 0) >> 2] | 0) {
    $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    if ($3_1) {
     $14_1 = $5(HEAP32[$2_1 >> 2] | 0 | 0, $3_1 | 0, $1_1 | 0) | 0;
     break label$1;
    }
   }
   HEAPU8[1049704 >> 0] | 0;
   $14_1 = $6($1_1 | 0) | 0;
  }
  $2_1 = $14_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 ? $2_1 : 1;
  HEAP32[$0_1 >> 2] = !$2_1;
 }
 
 function $5($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $202 = 0, $8_1 = 0;
  label$1 : {
   label$2 : {
    $4_1 = $0_1 - 4 | 0;
    $6_1 = HEAP32[$4_1 >> 2] | 0;
    $3_1 = $6_1 & -8 | 0;
    $5_1 = $6_1 & 3 | 0;
    if ($3_1 >>> 0 >= (($5_1 ? 4 : 8) + $1_1 | 0) >>> 0) {
     if ($3_1 >>> 0 > ($1_1 + 39 | 0) >>> 0 ? $5_1 : 0) {
      break label$2
     }
     $1_1 = $2_1 >>> 0 < 11 >>> 0 ? 16 : ($2_1 + 11 | 0) & -8 | 0;
     label$4 : {
      label$5 : {
       if (!$5_1) {
        if ($1_1 >>> 0 < 256 >>> 0 | $3_1 >>> 0 < ($1_1 | 4 | 0) >>> 0 | 0 | ($3_1 - $1_1 | 0) >>> 0 >= 131073 >>> 0 | 0) {
         break label$5
        }
        break label$4;
       }
       $5_1 = $0_1 - 8 | 0;
       $7_1 = $5_1 + $3_1 | 0;
       label$7 : {
        label$8 : {
         label$9 : {
          if ($1_1 >>> 0 > $3_1 >>> 0) {
           if (($7_1 | 0) == (HEAP32[1050144 >> 2] | 0 | 0)) {
            break label$7
           }
           if (($7_1 | 0) == (HEAP32[1050140 >> 2] | 0 | 0)) {
            break label$8
           }
           $6_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
           if ($6_1 & 2 | 0) {
            break label$5
           }
           $6_1 = $6_1 & -8 | 0;
           $3_1 = $6_1 + $3_1 | 0;
           if ($3_1 >>> 0 < $1_1 >>> 0) {
            break label$5
           }
           $16($7_1 | 0, $6_1 | 0);
           $2_1 = $3_1 - $1_1 | 0;
           if ($2_1 >>> 0 < 16 >>> 0) {
            break label$9
           }
           HEAP32[$4_1 >> 2] = $1_1 | ((HEAP32[$4_1 >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
           $1_1 = $1_1 + $5_1 | 0;
           HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 | 3 | 0;
           $4_1 = $3_1 + $5_1 | 0;
           HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
           $17($1_1 | 0, $2_1 | 0);
           return $0_1 | 0;
          }
          $2_1 = $3_1 - $1_1 | 0;
          if ($2_1 >>> 0 <= 15 >>> 0) {
           break label$4
          }
          HEAP32[$4_1 >> 2] = $1_1 | ($6_1 & 1 | 0) | 0 | 2 | 0;
          $1_1 = $1_1 + $5_1 | 0;
          HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 | 3 | 0;
          HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 1 | 0;
          $17($1_1 | 0, $2_1 | 0);
          return $0_1 | 0;
         }
         HEAP32[$4_1 >> 2] = $3_1 | ((HEAP32[$4_1 >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
         $1_1 = $3_1 + $5_1 | 0;
         HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
         return $0_1 | 0;
        }
        $3_1 = (HEAP32[1050132 >> 2] | 0) + $3_1 | 0;
        if ($3_1 >>> 0 < $1_1 >>> 0) {
         break label$5
        }
        label$11 : {
         $2_1 = $3_1 - $1_1 | 0;
         if ($2_1 >>> 0 <= 15 >>> 0) {
          HEAP32[$4_1 >> 2] = $6_1 & 1 | 0 | $3_1 | 0 | 2 | 0;
          $1_1 = $3_1 + $5_1 | 0;
          HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
          $2_1 = 0;
          $1_1 = 0;
          break label$11;
         }
         HEAP32[$4_1 >> 2] = $1_1 | ($6_1 & 1 | 0) | 0 | 2 | 0;
         $1_1 = $1_1 + $5_1 | 0;
         HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
         $4_1 = $3_1 + $5_1 | 0;
         HEAP32[$4_1 >> 2] = $2_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -2 | 0;
        }
        HEAP32[1050140 >> 2] = $1_1;
        HEAP32[1050132 >> 2] = $2_1;
        return $0_1 | 0;
       }
       $3_1 = (HEAP32[1050136 >> 2] | 0) + $3_1 | 0;
       if ($3_1 >>> 0 > $1_1 >>> 0) {
        break label$1
       }
      }
      $1_1 = $6($2_1 | 0) | 0;
      if (!$1_1) {
       return 0 | 0
      }
      $202 = $1_1;
      $1_1 = HEAP32[$4_1 >> 2] | 0;
      $1_1 = ($1_1 & 3 | 0 ? -4 : -8) + ($1_1 & -8 | 0) | 0;
      $8_1 = $57($202 | 0, $0_1 | 0, ($1_1 >>> 0 < $2_1 >>> 0 ? $1_1 : $2_1) | 0) | 0;
      $14($0_1 | 0);
      $0_1 = $8_1;
     }
     return $0_1 | 0;
    }
    $15(1049557 | 0, 1049604 | 0);
    wasm2js_trap();
   }
   $15(1049620 | 0, 1049668 | 0);
   wasm2js_trap();
  }
  HEAP32[$4_1 >> 2] = $1_1 | ($6_1 & 1 | 0) | 0 | 2 | 0;
  $2_1 = $1_1 + $5_1 | 0;
  $1_1 = $3_1 - $1_1 | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
  HEAP32[1050136 >> 2] = $1_1;
  HEAP32[1050144 >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $6($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $318 = 0, $383 = 0, $740 = 0, $824 = 0, $1004 = 0, $241 = 0, $9_1 = 0, $9$hi = 0, $691 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          if ($0_1 >>> 0 >= 245 >>> 0) {
           if ($0_1 >>> 0 >= -65587 >>> 0) {
            break label$4
           }
           $1_1 = $0_1 + 11 | 0;
           $5_1 = $1_1 & -8 | 0;
           $8_1 = HEAP32[1050128 >> 2] | 0;
           if (!$8_1) {
            break label$5
           }
           $7_1 = 31;
           $3_1 = 0 - $5_1 | 0;
           if ($0_1 >>> 0 <= 16777204 >>> 0) {
            $0_1 = Math_clz32($1_1 >>> 8 | 0);
            $7_1 = ((($5_1 >>> (6 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
           }
           $2_1 = HEAP32[(($7_1 << 2 | 0) + 1049716 | 0) >> 2] | 0;
           if (!$2_1) {
            $0_1 = 0;
            $1_1 = 0;
            break label$8;
           }
           $0_1 = 0;
           $4_1 = $5_1 << (($7_1 | 0) != (31 | 0) ? 25 - ($7_1 >>> 1 | 0) | 0 : 0) | 0;
           $1_1 = 0;
           label$12 : while (1) {
            label$13 : {
             $6_1 = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) & -8 | 0;
             if ($6_1 >>> 0 < $5_1 >>> 0) {
              break label$13
             }
             $6_1 = $6_1 - $5_1 | 0;
             if ($6_1 >>> 0 >= $3_1 >>> 0) {
              break label$13
             }
             $1_1 = $2_1;
             $3_1 = $6_1;
             if ($3_1) {
              break label$13
             }
             $3_1 = 0;
             $0_1 = $1_1;
             break label$7;
            }
            $6_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
            $2_1 = HEAP32[(($2_1 + (($4_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
            $0_1 = $6_1 ? (($6_1 | 0) != ($2_1 | 0) ? $6_1 : $0_1) : $0_1;
            $4_1 = $4_1 << 1 | 0;
            if ($2_1) {
             continue label$12
            }
            break label$12;
           };
           break label$8;
          }
          $2_1 = HEAP32[1050124 >> 2] | 0;
          $5_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & 504 | 0;
          $0_1 = $5_1 >>> 3 | 0;
          $1_1 = $2_1 >>> $0_1 | 0;
          if ($1_1 & 3 | 0) {
           label$15 : {
            $6_1 = (($1_1 ^ -1 | 0) & 1 | 0) + $0_1 | 0;
            $0_1 = $6_1 << 3 | 0;
            $4_1 = $0_1 + 1049860 | 0;
            $1_1 = HEAP32[($0_1 + 1049868 | 0) >> 2] | 0;
            $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
            if (($4_1 | 0) != ($3_1 | 0)) {
             HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
             HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
             break label$15;
            }
            (wasm2js_i32$0 = 1050124, wasm2js_i32$1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
           $0_1 = $0_1 + $1_1 | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
           return $1_1 + 8 | 0 | 0;
          }
          if ($5_1 >>> 0 <= (HEAP32[1050132 >> 2] | 0) >>> 0) {
           break label$5
          }
          label$17 : {
           label$18 : {
            if (!$1_1) {
             $0_1 = HEAP32[1050128 >> 2] | 0;
             if (!$0_1) {
              break label$5
             }
             $1_1 = HEAP32[(((__wasm_ctz_i32($0_1 | 0) | 0) << 2 | 0) + 1049716 | 0) >> 2] | 0;
             $3_1 = ((HEAP32[($1_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $5_1 | 0;
             $2_1 = $1_1;
             label$20 : while (1) {
              label$21 : {
               $0_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                break label$21
               }
               $0_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
               if ($0_1) {
                break label$21
               }
               $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
               label$22 : {
                label$23 : {
                 $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
                 if (($2_1 | 0) == ($0_1 | 0)) {
                  $0_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
                  $1_1 = HEAP32[($2_1 + ($0_1 ? 20 : 16) | 0) >> 2] | 0;
                  if ($1_1) {
                   break label$23
                  }
                  $0_1 = 0;
                  break label$22;
                 }
                 $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
                 HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
                 HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
                 break label$22;
                }
                $4_1 = $0_1 ? $2_1 + 20 | 0 : $2_1 + 16 | 0;
                label$25 : while (1) {
                 $6_1 = $4_1;
                 $0_1 = $1_1;
                 $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                 $4_1 = $1_1 ? $0_1 + 20 | 0 : $0_1 + 16 | 0;
                 $1_1 = HEAP32[($0_1 + ($1_1 ? 20 : 16) | 0) >> 2] | 0;
                 if ($1_1) {
                  continue label$25
                 }
                 break label$25;
                };
                HEAP32[$6_1 >> 2] = 0;
               }
               if (!$7_1) {
                break label$17
               }
               $1_1 = ((HEAP32[($2_1 + 28 | 0) >> 2] | 0) << 2 | 0) + 1049716 | 0;
               if (($2_1 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
                HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $0_1;
                if (!$0_1) {
                 break label$17
                }
                break label$18;
               }
               HEAP32[$1_1 >> 2] = $0_1;
               if ($0_1) {
                break label$18
               }
               (wasm2js_i32$0 = 1050128, wasm2js_i32$1 = (HEAP32[1050128 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break label$17;
              }
              $1_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $5_1 | 0;
              $241 = $1_1;
              $1_1 = $1_1 >>> 0 < $3_1 >>> 0;
              $3_1 = $1_1 ? $241 : $3_1;
              $2_1 = $1_1 ? $0_1 : $2_1;
              $1_1 = $0_1;
              continue label$20;
             };
            }
            label$27 : {
             $4_1 = 2 << $0_1 | 0;
             $6_1 = __wasm_ctz_i32(($4_1 | (0 - $4_1 | 0) | 0) & ($1_1 << $0_1 | 0) | 0 | 0) | 0;
             $1_1 = $6_1 << 3 | 0;
             $4_1 = $1_1 + 1049860 | 0;
             $0_1 = HEAP32[($1_1 + 1049868 | 0) >> 2] | 0;
             $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             if (($4_1 | 0) != ($3_1 | 0)) {
              HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
              break label$27;
             }
             (wasm2js_i32$0 = 1050124, wasm2js_i32$1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
            $6_1 = $0_1 + $5_1 | 0;
            $4_1 = $1_1 - $5_1 | 0;
            HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
            HEAP32[($0_1 + $1_1 | 0) >> 2] = $4_1;
            $3_1 = HEAP32[1050132 >> 2] | 0;
            if ($3_1) {
             $1_1 = ($3_1 & -8 | 0) + 1049860 | 0;
             $2_1 = HEAP32[1050140 >> 2] | 0;
             label$30 : {
              $5_1 = HEAP32[1050124 >> 2] | 0;
              $3_1 = 1 << ($3_1 >>> 3 | 0) | 0;
              if (!($5_1 & $3_1 | 0)) {
               HEAP32[1050124 >> 2] = $3_1 | $5_1 | 0;
               $318 = $1_1;
               break label$30;
              }
              $318 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
             }
             $3_1 = $318;
             HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
             HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
             HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
             HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
            }
            HEAP32[1050140 >> 2] = $6_1;
            HEAP32[1050132 >> 2] = $4_1;
            break label$1;
           }
           HEAP32[($0_1 + 24 | 0) >> 2] = $7_1;
           $1_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
           if ($1_1) {
            HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
            HEAP32[($1_1 + 24 | 0) >> 2] = $0_1;
           }
           $1_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
           if (!$1_1) {
            break label$17
           }
           HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
           HEAP32[($1_1 + 24 | 0) >> 2] = $0_1;
          }
          label$33 : {
           label$34 : {
            if ($3_1 >>> 0 >= 16 >>> 0) {
             HEAP32[($2_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
             $4_1 = $2_1 + $5_1 | 0;
             HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
             HEAP32[($3_1 + $4_1 | 0) >> 2] = $3_1;
             $6_1 = HEAP32[1050132 >> 2] | 0;
             if (!$6_1) {
              break label$34
             }
             $0_1 = ($6_1 & -8 | 0) + 1049860 | 0;
             $1_1 = HEAP32[1050140 >> 2] | 0;
             label$36 : {
              $5_1 = HEAP32[1050124 >> 2] | 0;
              $6_1 = 1 << ($6_1 >>> 3 | 0) | 0;
              if (!($5_1 & $6_1 | 0)) {
               HEAP32[1050124 >> 2] = $5_1 | $6_1 | 0;
               $383 = $0_1;
               break label$36;
              }
              $383 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             }
             $6_1 = $383;
             HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
             HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
             HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
             HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
             break label$34;
            }
            $0_1 = $3_1 + $5_1 | 0;
            HEAP32[($2_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
            $0_1 = $0_1 + $2_1 | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
            break label$33;
           }
           HEAP32[1050140 >> 2] = $4_1;
           HEAP32[1050132 >> 2] = $3_1;
          }
          return $2_1 + 8 | 0 | 0;
         }
         if (!($0_1 | $1_1 | 0)) {
          $1_1 = 0;
          $0_1 = 2 << $7_1 | 0;
          $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $8_1 | 0;
          if (!$0_1) {
           break label$5
          }
          $0_1 = HEAP32[(((__wasm_ctz_i32($0_1 | 0) | 0) << 2 | 0) + 1049716 | 0) >> 2] | 0;
         }
         if (!$0_1) {
          break label$6
         }
        }
        label$39 : while (1) {
         $4_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0;
         $6_1 = $4_1 - $5_1 | 0;
         $7_1 = $6_1 >>> 0 < $3_1 >>> 0;
         $8_1 = $7_1 ? $0_1 : $1_1;
         $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         if (!$2_1) {
          $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0
         }
         $0_1 = $4_1 >>> 0 < $5_1 >>> 0;
         $1_1 = $0_1 ? $1_1 : $8_1;
         $3_1 = $0_1 ? $3_1 : $7_1 ? $6_1 : $3_1;
         $0_1 = $2_1;
         if ($0_1) {
          continue label$39
         }
         break label$39;
        };
       }
       if (!$1_1) {
        break label$5
       }
       $0_1 = HEAP32[1050132 >> 2] | 0;
       if ($5_1 >>> 0 <= $0_1 >>> 0 & $3_1 >>> 0 >= ($0_1 - $5_1 | 0) >>> 0 | 0) {
        break label$5
       }
       $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
       label$41 : {
        label$42 : {
         $0_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
         if (($1_1 | 0) == ($0_1 | 0)) {
          $0_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
          $2_1 = HEAP32[($1_1 + ($0_1 ? 20 : 16) | 0) >> 2] | 0;
          if ($2_1) {
           break label$42
          }
          $0_1 = 0;
          break label$41;
         }
         $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
         HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
         HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
         break label$41;
        }
        $4_1 = $0_1 ? $1_1 + 20 | 0 : $1_1 + 16 | 0;
        label$44 : while (1) {
         $6_1 = $4_1;
         $0_1 = $2_1;
         $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         $4_1 = $2_1 ? $0_1 + 20 | 0 : $0_1 + 16 | 0;
         $2_1 = HEAP32[($0_1 + ($2_1 ? 20 : 16) | 0) >> 2] | 0;
         if ($2_1) {
          continue label$44
         }
         break label$44;
        };
        HEAP32[$6_1 >> 2] = 0;
       }
       if (!$7_1) {
        break label$2
       }
       $2_1 = ((HEAP32[($1_1 + 28 | 0) >> 2] | 0) << 2 | 0) + 1049716 | 0;
       if (($1_1 | 0) != (HEAP32[$2_1 >> 2] | 0 | 0)) {
        HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $0_1;
        if (!$0_1) {
         break label$2
        }
        break label$3;
       }
       HEAP32[$2_1 >> 2] = $0_1;
       if ($0_1) {
        break label$3
       }
       (wasm2js_i32$0 = 1050128, wasm2js_i32$1 = (HEAP32[1050128 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      label$46 : {
       label$47 : {
        label$48 : {
         label$49 : {
          label$50 : {
           $1_1 = HEAP32[1050132 >> 2] | 0;
           if ($5_1 >>> 0 > $1_1 >>> 0) {
            $0_1 = HEAP32[1050136 >> 2] | 0;
            if ($5_1 >>> 0 >= $0_1 >>> 0) {
             $3_1 = 0;
             $0_1 = $5_1 + 65583 | 0;
             $1_1 = __wasm_memory_grow($0_1 >>> 16 | 0 | 0);
             $4_1 = ($1_1 | 0) == (-1 | 0);
             if ($4_1) {
              break label$4
             }
             $2_1 = $1_1 << 16 | 0;
             if (!$2_1) {
              break label$4
             }
             $3_1 = $4_1 ? 0 : $0_1 & -65536 | 0;
             $0_1 = $3_1 + (HEAP32[1050148 >> 2] | 0) | 0;
             HEAP32[1050148 >> 2] = $0_1;
             $1_1 = HEAP32[1050152 >> 2] | 0;
             HEAP32[1050152 >> 2] = $0_1 >>> 0 < $1_1 >>> 0 ? $1_1 : $0_1;
             label$53 : {
              label$54 : {
               $1_1 = HEAP32[1050144 >> 2] | 0;
               if ($1_1) {
                $0_1 = 1049844;
                label$56 : while (1) {
                 $4_1 = HEAP32[$0_1 >> 2] | 0;
                 $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if (($4_1 + $6_1 | 0 | 0) == ($2_1 | 0)) {
                  break label$54
                 }
                 $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                 if ($0_1) {
                  continue label$56
                 }
                 break label$56;
                };
                break label$53;
               }
               $0_1 = HEAP32[1050160 >> 2] | 0;
               if (!($0_1 >>> 0 <= $2_1 >>> 0 ? $0_1 : 0)) {
                HEAP32[1050160 >> 2] = $2_1
               }
               HEAP32[1050164 >> 2] = 4095;
               HEAP32[1049848 >> 2] = $3_1;
               HEAP32[1049844 >> 2] = $2_1;
               HEAP32[1049872 >> 2] = 1049860;
               HEAP32[1049880 >> 2] = 1049868;
               HEAP32[1049868 >> 2] = 1049860;
               HEAP32[1049888 >> 2] = 1049876;
               HEAP32[1049876 >> 2] = 1049868;
               HEAP32[1049896 >> 2] = 1049884;
               HEAP32[1049884 >> 2] = 1049876;
               HEAP32[1049904 >> 2] = 1049892;
               HEAP32[1049892 >> 2] = 1049884;
               HEAP32[1049912 >> 2] = 1049900;
               HEAP32[1049900 >> 2] = 1049892;
               HEAP32[1049920 >> 2] = 1049908;
               HEAP32[1049908 >> 2] = 1049900;
               HEAP32[1049928 >> 2] = 1049916;
               HEAP32[1049916 >> 2] = 1049908;
               HEAP32[1049856 >> 2] = 0;
               HEAP32[1049936 >> 2] = 1049924;
               HEAP32[1049924 >> 2] = 1049916;
               HEAP32[1049932 >> 2] = 1049924;
               HEAP32[1049944 >> 2] = 1049932;
               HEAP32[1049940 >> 2] = 1049932;
               HEAP32[1049952 >> 2] = 1049940;
               HEAP32[1049948 >> 2] = 1049940;
               HEAP32[1049960 >> 2] = 1049948;
               HEAP32[1049956 >> 2] = 1049948;
               HEAP32[1049968 >> 2] = 1049956;
               HEAP32[1049964 >> 2] = 1049956;
               HEAP32[1049976 >> 2] = 1049964;
               HEAP32[1049972 >> 2] = 1049964;
               HEAP32[1049984 >> 2] = 1049972;
               HEAP32[1049980 >> 2] = 1049972;
               HEAP32[1049992 >> 2] = 1049980;
               HEAP32[1049988 >> 2] = 1049980;
               HEAP32[105e4 >> 2] = 1049988;
               HEAP32[1050008 >> 2] = 1049996;
               HEAP32[1049996 >> 2] = 1049988;
               HEAP32[1050016 >> 2] = 1050004;
               HEAP32[1050004 >> 2] = 1049996;
               HEAP32[1050024 >> 2] = 1050012;
               HEAP32[1050012 >> 2] = 1050004;
               HEAP32[1050032 >> 2] = 1050020;
               HEAP32[1050020 >> 2] = 1050012;
               HEAP32[1050040 >> 2] = 1050028;
               HEAP32[1050028 >> 2] = 1050020;
               HEAP32[1050048 >> 2] = 1050036;
               HEAP32[1050036 >> 2] = 1050028;
               HEAP32[1050056 >> 2] = 1050044;
               HEAP32[1050044 >> 2] = 1050036;
               HEAP32[1050064 >> 2] = 1050052;
               HEAP32[1050052 >> 2] = 1050044;
               HEAP32[1050072 >> 2] = 1050060;
               HEAP32[1050060 >> 2] = 1050052;
               HEAP32[1050080 >> 2] = 1050068;
               HEAP32[1050068 >> 2] = 1050060;
               HEAP32[1050088 >> 2] = 1050076;
               HEAP32[1050076 >> 2] = 1050068;
               HEAP32[1050096 >> 2] = 1050084;
               HEAP32[1050084 >> 2] = 1050076;
               HEAP32[1050104 >> 2] = 1050092;
               HEAP32[1050092 >> 2] = 1050084;
               HEAP32[1050112 >> 2] = 1050100;
               HEAP32[1050100 >> 2] = 1050092;
               HEAP32[1050120 >> 2] = 1050108;
               HEAP32[1050108 >> 2] = 1050100;
               HEAP32[1050144 >> 2] = $2_1;
               HEAP32[1050116 >> 2] = 1050108;
               $0_1 = $3_1 - 40 | 0;
               HEAP32[1050136 >> 2] = $0_1;
               HEAP32[($2_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
               HEAP32[(($0_1 + $2_1 | 0) + 4 | 0) >> 2] = 40;
               HEAP32[1050156 >> 2] = 2097152;
               break label$46;
              }
              if ($1_1 >>> 0 < $4_1 >>> 0 | $1_1 >>> 0 >= $2_1 >>> 0 | 0) {
               break label$53
              }
              if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
               break label$50
              }
             }
             $0_1 = HEAP32[1050160 >> 2] | 0;
             HEAP32[1050160 >> 2] = $0_1 >>> 0 < $2_1 >>> 0 ? $0_1 : $2_1;
             $4_1 = $2_1 + $3_1 | 0;
             $0_1 = 1049844;
             label$58 : {
              label$59 : {
               label$60 : while (1) {
                $6_1 = HEAP32[$0_1 >> 2] | 0;
                if (($4_1 | 0) != ($6_1 | 0)) {
                 $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                 if ($0_1) {
                  continue label$60
                 }
                 break label$59;
                }
                break label$60;
               };
               if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
                break label$58
               }
              }
              $0_1 = 1049844;
              label$62 : while (1) {
               label$63 : {
                $4_1 = HEAP32[$0_1 >> 2] | 0;
                if ($1_1 >>> 0 >= $4_1 >>> 0) {
                 $6_1 = $4_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
                 if ($1_1 >>> 0 < $6_1 >>> 0) {
                  break label$63
                 }
                }
                $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                continue label$62;
               }
               break label$62;
              };
              HEAP32[1050144 >> 2] = $2_1;
              $0_1 = $3_1 - 40 | 0;
              HEAP32[1050136 >> 2] = $0_1;
              HEAP32[($2_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
              HEAP32[(($0_1 + $2_1 | 0) + 4 | 0) >> 2] = 40;
              HEAP32[1050156 >> 2] = 2097152;
              $0_1 = (($6_1 - 32 | 0) & -8 | 0) - 8 | 0;
              $4_1 = $0_1 >>> 0 < ($1_1 + 16 | 0) >>> 0 ? $1_1 : $0_1;
              HEAP32[($4_1 + 4 | 0) >> 2] = 27;
              i64toi32_i32$2 = 1049844;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $9_1 = i64toi32_i32$0;
              $9$hi = i64toi32_i32$1;
              i64toi32_i32$2 = 1049852;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $691 = i64toi32_i32$1;
              i64toi32_i32$1 = $4_1 + 16 | 0;
              HEAP32[i64toi32_i32$1 >> 2] = $691;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$0 = $9$hi;
              i64toi32_i32$1 = $4_1;
              HEAP32[($4_1 + 8 | 0) >> 2] = $9_1;
              HEAP32[($4_1 + 12 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[1049848 >> 2] = $3_1;
              HEAP32[1049844 >> 2] = $2_1;
              HEAP32[1049852 >> 2] = $4_1 + 8 | 0;
              HEAP32[1049856 >> 2] = 0;
              $0_1 = $4_1 + 28 | 0;
              label$65 : while (1) {
               HEAP32[$0_1 >> 2] = 7;
               $0_1 = $0_1 + 4 | 0;
               if ($0_1 >>> 0 < $6_1 >>> 0) {
                continue label$65
               }
               break label$65;
              };
              if (($1_1 | 0) == ($4_1 | 0)) {
               break label$46
              }
              HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -2 | 0;
              $0_1 = $4_1 - $1_1 | 0;
              HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
              HEAP32[$4_1 >> 2] = $0_1;
              if ($0_1 >>> 0 >= 256 >>> 0) {
               $54($1_1 | 0, $0_1 | 0);
               break label$46;
              }
              $2_1 = ($0_1 & 248 | 0) + 1049860 | 0;
              label$67 : {
               $4_1 = HEAP32[1050124 >> 2] | 0;
               $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
               if (!($4_1 & $0_1 | 0)) {
                HEAP32[1050124 >> 2] = $0_1 | $4_1 | 0;
                $740 = $2_1;
                break label$67;
               }
               $740 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
              }
              $0_1 = $740;
              HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
              HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
              HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
              HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
              break label$46;
             }
             HEAP32[$0_1 >> 2] = $2_1;
             HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $3_1 | 0;
             HEAP32[($2_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
             $3_1 = (($6_1 + 15 | 0) & -8 | 0) - 8 | 0;
             $0_1 = $2_1 + $5_1 | 0;
             $5_1 = $3_1 - $0_1 | 0;
             if (($3_1 | 0) == (HEAP32[1050144 >> 2] | 0 | 0)) {
              break label$49
             }
             if (($3_1 | 0) == (HEAP32[1050140 >> 2] | 0 | 0)) {
              break label$48
             }
             $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
             if (($1_1 & 3 | 0 | 0) == (1 | 0)) {
              $1_1 = $1_1 & -8 | 0;
              $16($3_1 | 0, $1_1 | 0);
              $5_1 = $1_1 + $5_1 | 0;
              $3_1 = $1_1 + $3_1 | 0;
              $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
             }
             HEAP32[($3_1 + 4 | 0) >> 2] = $1_1 & -2 | 0;
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
             HEAP32[($0_1 + $5_1 | 0) >> 2] = $5_1;
             if ($5_1 >>> 0 >= 256 >>> 0) {
              $54($0_1 | 0, $5_1 | 0);
              break label$47;
             }
             $1_1 = ($5_1 & 248 | 0) + 1049860 | 0;
             label$71 : {
              $4_1 = HEAP32[1050124 >> 2] | 0;
              $3_1 = 1 << ($5_1 >>> 3 | 0) | 0;
              if (!($4_1 & $3_1 | 0)) {
               HEAP32[1050124 >> 2] = $3_1 | $4_1 | 0;
               $824 = $1_1;
               break label$71;
              }
              $824 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
             }
             $4_1 = $824;
             HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
             HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
             HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
             HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
             break label$47;
            }
            $1_1 = $0_1 - $5_1 | 0;
            HEAP32[1050136 >> 2] = $1_1;
            $0_1 = HEAP32[1050144 >> 2] | 0;
            $2_1 = $0_1 + $5_1 | 0;
            HEAP32[1050144 >> 2] = $2_1;
            HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
            $3_1 = $0_1 + 8 | 0;
            break label$4;
           }
           $0_1 = HEAP32[1050140 >> 2] | 0;
           label$73 : {
            $2_1 = $1_1 - $5_1 | 0;
            if ($2_1 >>> 0 <= 15 >>> 0) {
             HEAP32[1050140 >> 2] = 0;
             HEAP32[1050132 >> 2] = 0;
             HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 3 | 0;
             $1_1 = $0_1 + $1_1 | 0;
             HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
             break label$73;
            }
            HEAP32[1050132 >> 2] = $2_1;
            $4_1 = $0_1 + $5_1 | 0;
            HEAP32[1050140 >> 2] = $4_1;
            HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
            HEAP32[($0_1 + $1_1 | 0) >> 2] = $2_1;
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
           }
           break label$1;
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $6_1 | 0;
          $0_1 = HEAP32[1050144 >> 2] | 0;
          $1_1 = ($0_1 + 15 | 0) & -8 | 0;
          $2_1 = $1_1 - 8 | 0;
          HEAP32[1050144 >> 2] = $2_1;
          $4_1 = (HEAP32[1050136 >> 2] | 0) + $3_1 | 0;
          $1_1 = ($4_1 + ($0_1 - $1_1 | 0) | 0) + 8 | 0;
          HEAP32[1050136 >> 2] = $1_1;
          HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
          HEAP32[(($0_1 + $4_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[1050156 >> 2] = 2097152;
          break label$46;
         }
         HEAP32[1050144 >> 2] = $0_1;
         $1_1 = (HEAP32[1050136 >> 2] | 0) + $5_1 | 0;
         HEAP32[1050136 >> 2] = $1_1;
         HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
         break label$47;
        }
        HEAP32[1050140 >> 2] = $0_1;
        $1_1 = (HEAP32[1050132 >> 2] | 0) + $5_1 | 0;
        HEAP32[1050132 >> 2] = $1_1;
        HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
        HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
       }
       return $2_1 + 8 | 0 | 0;
      }
      $3_1 = 0;
      $0_1 = HEAP32[1050136 >> 2] | 0;
      if ($0_1 >>> 0 <= $5_1 >>> 0) {
       break label$4
      }
      $1_1 = $0_1 - $5_1 | 0;
      HEAP32[1050136 >> 2] = $1_1;
      $0_1 = HEAP32[1050144 >> 2] | 0;
      $2_1 = $0_1 + $5_1 | 0;
      HEAP32[1050144 >> 2] = $2_1;
      HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
      break label$1;
     }
     return $3_1 | 0;
    }
    HEAP32[($0_1 + 24 | 0) >> 2] = $7_1;
    $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    if ($2_1) {
     HEAP32[($0_1 + 16 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $0_1;
    }
    $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($2_1 + 24 | 0) >> 2] = $0_1;
   }
   label$76 : {
    if ($3_1 >>> 0 >= 16 >>> 0) {
     HEAP32[($1_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
     $0_1 = $1_1 + $5_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
     HEAP32[($0_1 + $3_1 | 0) >> 2] = $3_1;
     if ($3_1 >>> 0 >= 256 >>> 0) {
      $54($0_1 | 0, $3_1 | 0);
      break label$76;
     }
     $2_1 = ($3_1 & 248 | 0) + 1049860 | 0;
     label$79 : {
      $4_1 = HEAP32[1050124 >> 2] | 0;
      $3_1 = 1 << ($3_1 >>> 3 | 0) | 0;
      if (!($4_1 & $3_1 | 0)) {
       HEAP32[1050124 >> 2] = $3_1 | $4_1 | 0;
       $1004 = $2_1;
       break label$79;
      }
      $1004 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     }
     $4_1 = $1004;
     HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
     break label$76;
    }
    $0_1 = $3_1 + $5_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
    $0_1 = $0_1 + $1_1 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   }
   return $1_1 + 8 | 0 | 0;
  }
  return $0_1 + 8 | 0 | 0;
 }
 
 function $7($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[($1_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 20 | 0) >> 2] | 0, 1049684, 5) | 0 | 0;
 }
 
 function $8($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  if ($1_1) {
   $9(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0)
  }
 }
 
 function $9($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 - 4 | 0) >> 2] | 0;
   $3_1 = $2_1 & -8 | 0;
   $2_1 = $2_1 & 3 | 0;
   if ($3_1 >>> 0 >= (($2_1 ? 4 : 8) + $1_1 | 0) >>> 0) {
    if ($3_1 >>> 0 > ($1_1 + 39 | 0) >>> 0 ? $2_1 : 0) {
     break label$1
    }
    $14($0_1 | 0);
    return;
   }
   $15(1049557 | 0, 1049604 | 0);
   wasm2js_trap();
  }
  $15(1049620 | 0, 1049668 | 0);
  wasm2js_trap();
 }
 
 function $10($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  if ($2_1 >>> 0 > ((HEAP32[$0_1 >> 2] | 0) - $3_1 | 0) >>> 0) {
   $3($0_1 | 0, $3_1 | 0, $2_1 | 0);
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  }
  $57((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $3_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1 + $3_1 | 0;
  return 0 | 0;
 }
 
 function $11($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $31_1 = 0, $6_1 = 0, $7_1 = 0, $87 = 0, $78 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 >= 128 >>> 0) {
      HEAP32[($3_1 + 12 | 0) >> 2] = 0;
      if ($1_1 >>> 0 < 2048 >>> 0) {
       break label$3
      }
      if ($1_1 >>> 0 < 65536 >>> 0) {
       HEAP8[($3_1 + 14 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
       HEAP8[($3_1 + 12 | 0) >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
       HEAP8[($3_1 + 13 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $31_1 = 3;
       break label$2;
      }
      HEAP8[($3_1 + 15 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[($3_1 + 12 | 0) >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($3_1 + 14 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($3_1 + 13 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      $31_1 = 4;
      break label$2;
     }
     $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     $4_1 = HEAP32[$0_1 >> 2] | 0;
     if (($6_1 | 0) == ($4_1 | 0)) {
      $2_1 = global$0 - 32 | 0;
      global$0 = $2_1;
      if (($4_1 | 0) == (-1 | 0)) {
       $0(0 | 0);
       wasm2js_trap();
      }
      $5_1 = $4_1 << 1 | 0;
      $7_1 = $4_1 + 1 | 0;
      $5_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $5_1 : $7_1;
      $5_1 = $5_1 >>> 0 <= 8 >>> 0 ? 8 : $5_1;
      if (($5_1 | 0) < (0 | 0)) {
       $0(0 | 0);
       wasm2js_trap();
      }
      $78 = $2_1;
      if ($4_1) {
       HEAP32[($2_1 + 28 | 0) >> 2] = $4_1;
       HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $87 = 1;
      } else {
       $87 = 0
      }
      HEAP32[($78 + 24 | 0) >> 2] = $87;
      $4($2_1 + 8 | 0 | 0, $5_1 | 0, $2_1 + 20 | 0 | 0);
      if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       $0(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0);
       wasm2js_trap();
      }
      $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      HEAP32[$0_1 >> 2] = $5_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
      global$0 = $2_1 + 32 | 0;
     }
     HEAP32[($0_1 + 8 | 0) >> 2] = $6_1 + 1 | 0;
     HEAP8[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $6_1 | 0) >> 0] = $1_1;
     break label$1;
    }
    HEAP8[($3_1 + 13 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
    HEAP8[($3_1 + 12 | 0) >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
    $31_1 = 2;
   }
   $1_1 = $31_1;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 > ((HEAP32[$0_1 >> 2] | 0) - $2_1 | 0) >>> 0) {
    $3($0_1 | 0, $2_1 | 0, $1_1 | 0);
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   }
   $57((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0 | 0, $3_1 + 12 | 0 | 0, $1_1 | 0) | 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + $2_1 | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return 0 | 0;
 }
 
 function $12($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $13($0_1 | 0, 1048576 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $13($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $12_1 = 0, $190 = 0, $11_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  HEAP8[($3_1 + 44 | 0) >> 0] = 3;
  HEAP32[($3_1 + 28 | 0) >> 2] = 32;
  HEAP32[($3_1 + 40 | 0) >> 2] = 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $10_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
      if (!$10_1) {
       $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       if (!$0_1) {
        break label$4
       }
       $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
       $5_1 = $0_1 << 3 | 0;
       $7_1 = (($0_1 - 1 | 0) & 536870911 | 0) + 1 | 0;
       $0_1 = HEAP32[$2_1 >> 2] | 0;
       label$6 : while (1) {
        $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($4_1) {
         if (FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($3_1 + 32 | 0) >> 2] | 0, HEAP32[$0_1 >> 2] | 0, $4_1) | 0) {
          break label$3
         }
        }
        if (FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$1_1 >> 2] | 0, $3_1 + 12 | 0) | 0) {
         break label$3
        }
        $1_1 = $1_1 + 8 | 0;
        $0_1 = $0_1 + 8 | 0;
        $5_1 = $5_1 - 8 | 0;
        if ($5_1) {
         continue label$6
        }
        break label$6;
       };
       break label$4;
      }
      $0_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$4
      }
      $11_1 = $0_1 << 5 | 0;
      $7_1 = (($0_1 - 1 | 0) & 134217727 | 0) + 1 | 0;
      $8_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      $0_1 = HEAP32[$2_1 >> 2] | 0;
      label$8 : while (1) {
       $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if ($1_1) {
        if (FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($3_1 + 32 | 0) >> 2] | 0, HEAP32[$0_1 >> 2] | 0, $1_1) | 0) {
         break label$3
        }
       }
       $1_1 = $5_1 + $10_1 | 0;
       HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
       HEAP8[($3_1 + 44 | 0) >> 0] = HEAPU8[($1_1 + 28 | 0) >> 0] | 0;
       HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
       $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       $9_1 = 0;
       $6_1 = 0;
       label$10 : {
        label$11 : {
         switch ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) - 1 | 0 | 0) {
         case 0:
          $12_1 = ($4_1 << 3 | 0) + $8_1 | 0;
          if (HEAP32[($12_1 + 4 | 0) >> 2] | 0) {
           break label$10
          }
          $4_1 = HEAP32[$12_1 >> 2] | 0;
          break;
         case 1:
          break label$10;
         default:
          break label$11;
         };
        }
        $6_1 = 1;
       }
       HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
       HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
       $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       label$13 : {
        label$14 : {
         switch ((HEAP32[$1_1 >> 2] | 0) - 1 | 0 | 0) {
         case 0:
          $6_1 = ($4_1 << 3 | 0) + $8_1 | 0;
          if (HEAP32[($6_1 + 4 | 0) >> 2] | 0) {
           break label$13
          }
          $4_1 = HEAP32[$6_1 >> 2] | 0;
          break;
         case 1:
          break label$13;
         default:
          break label$14;
         };
        }
        $9_1 = 1;
       }
       HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
       HEAP32[($3_1 + 20 | 0) >> 2] = $9_1;
       $1_1 = $8_1 + ((HEAP32[($1_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0;
       if (FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$1_1 >> 2] | 0, $3_1 + 12 | 0) | 0) {
        break label$3
       }
       $0_1 = $0_1 + 8 | 0;
       $5_1 = $5_1 + 32 | 0;
       if (($11_1 | 0) != ($5_1 | 0)) {
        continue label$8
       }
       break label$8;
      };
     }
     if ($7_1 >>> 0 >= (HEAP32[($2_1 + 4 | 0) >> 2] | 0) >>> 0) {
      break label$2
     }
     $0_1 = (HEAP32[$2_1 >> 2] | 0) + ($7_1 << 3 | 0) | 0;
     if (!(FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($3_1 + 32 | 0) >> 2] | 0, HEAP32[$0_1 >> 2] | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0)) {
      break label$2
     }
    }
    $190 = 1;
    break label$1;
   }
   $190 = 0;
  }
  global$0 = $3_1 + 48 | 0;
  return $190 | 0;
 }
 
 function $14($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $167 = 0, $59 = 0;
  $1_1 = $0_1 - 8 | 0;
  $3_1 = HEAP32[($0_1 - 4 | 0) >> 2] | 0;
  $0_1 = $3_1 & -8 | 0;
  $2_1 = $1_1 + $0_1 | 0;
  label$1 : {
   label$2 : {
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 2 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    $0_1 = $3_1 + $0_1 | 0;
    $1_1 = $1_1 - $3_1 | 0;
    if (($1_1 | 0) == (HEAP32[1050140 >> 2] | 0 | 0)) {
     if (((HEAP32[($2_1 + 4 | 0) >> 2] | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$2
     }
     HEAP32[1050132 >> 2] = $0_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) & -2 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[$2_1 >> 2] = $0_1;
     return;
    }
    $16($1_1 | 0, $3_1 | 0);
   }
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        if (!($3_1 & 2 | 0)) {
         if (($2_1 | 0) == (HEAP32[1050144 >> 2] | 0 | 0)) {
          break label$7
         }
         if (($2_1 | 0) == (HEAP32[1050140 >> 2] | 0 | 0)) {
          break label$6
         }
         $59 = $2_1;
         $2_1 = $3_1 & -8 | 0;
         $16($59 | 0, $2_1 | 0);
         $0_1 = $0_1 + $2_1 | 0;
         HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
         HEAP32[($0_1 + $1_1 | 0) >> 2] = $0_1;
         if (($1_1 | 0) != (HEAP32[1050140 >> 2] | 0 | 0)) {
          break label$8
         }
         HEAP32[1050132 >> 2] = $0_1;
         return;
        }
        HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
        HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[($0_1 + $1_1 | 0) >> 2] = $0_1;
       }
       if ($0_1 >>> 0 < 256 >>> 0) {
        break label$5
       }
       $54($1_1 | 0, $0_1 | 0);
       $1_1 = 0;
       $0_1 = (HEAP32[1050164 >> 2] | 0) - 1 | 0;
       HEAP32[1050164 >> 2] = $0_1;
       if ($0_1) {
        break label$1
       }
       $0_1 = HEAP32[1049852 >> 2] | 0;
       if ($0_1) {
        label$11 : while (1) {
         $1_1 = $1_1 + 1 | 0;
         $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
         if ($0_1) {
          continue label$11
         }
         break label$11;
        }
       }
       HEAP32[1050164 >> 2] = $1_1 >>> 0 <= 4095 >>> 0 ? 4095 : $1_1;
       return;
      }
      HEAP32[1050144 >> 2] = $1_1;
      $0_1 = (HEAP32[1050136 >> 2] | 0) + $0_1 | 0;
      HEAP32[1050136 >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if ((HEAP32[1050140 >> 2] | 0 | 0) == ($1_1 | 0)) {
       HEAP32[1050132 >> 2] = 0;
       HEAP32[1050140 >> 2] = 0;
      }
      $3_1 = HEAP32[1050156 >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$1
      }
      $2_1 = HEAP32[1050144 >> 2] | 0;
      if (!$2_1) {
       break label$1
      }
      $0_1 = 0;
      $4_1 = HEAP32[1050136 >> 2] | 0;
      if ($4_1 >>> 0 < 41 >>> 0) {
       break label$4
      }
      $1_1 = 1049844;
      label$13 : while (1) {
       $5_1 = HEAP32[$1_1 >> 2] | 0;
       if ($2_1 >>> 0 >= $5_1 >>> 0) {
        if ($2_1 >>> 0 < ($5_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >>> 0) {
         break label$4
        }
       }
       $1_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       continue label$13;
      };
     }
     HEAP32[1050140 >> 2] = $1_1;
     $0_1 = (HEAP32[1050132 >> 2] | 0) + $0_1 | 0;
     HEAP32[1050132 >> 2] = $0_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $0_1;
     return;
    }
    $2_1 = ($0_1 & 248 | 0) + 1049860 | 0;
    label$15 : {
     $3_1 = HEAP32[1050124 >> 2] | 0;
     $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
     if (!($3_1 & $0_1 | 0)) {
      HEAP32[1050124 >> 2] = $0_1 | $3_1 | 0;
      $167 = $2_1;
      break label$15;
     }
     $167 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    }
    $0_1 = $167;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[1049852 >> 2] | 0;
   if ($1_1) {
    label$18 : while (1) {
     $0_1 = $0_1 + 1 | 0;
     $1_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     if ($1_1) {
      continue label$18
     }
     break label$18;
    }
   }
   HEAP32[1050164 >> 2] = $0_1 >>> 0 <= 4095 >>> 0 ? 4095 : $0_1;
   if ($3_1 >>> 0 >= $4_1 >>> 0) {
    break label$1
   }
   HEAP32[1050156 >> 2] = -1;
  }
 }
 
 function $15($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 16 | 0) >> 2] = 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = 1;
  HEAP32[($2_1 + 8 | 0) >> 2] = 4;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  HEAP32[($2_1 + 28 | 0) >> 2] = 46;
  HEAP32[($2_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[$2_1 >> 2] = $2_1 + 24 | 0;
  $2($2_1 | 0, $1_1 | 0);
  wasm2js_trap();
 }
 
 function $16($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($1_1 >>> 0 >= 256 >>> 0) {
     $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     label$4 : {
      label$5 : {
       if (($0_1 | 0) == ($2_1 | 0)) {
        $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        $1_1 = HEAP32[($0_1 + ($2_1 ? 20 : 16) | 0) >> 2] | 0;
        if ($1_1) {
         break label$5
        }
        $2_1 = 0;
        break label$4;
       }
       $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
       break label$4;
      }
      $4_1 = $2_1 ? $0_1 + 20 | 0 : $0_1 + 16 | 0;
      label$7 : while (1) {
       $5_1 = $4_1;
       $2_1 = $1_1;
       $1_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
       $4_1 = $1_1 ? $2_1 + 20 | 0 : $2_1 + 16 | 0;
       $1_1 = HEAP32[($2_1 + ($1_1 ? 20 : 16) | 0) >> 2] | 0;
       if ($1_1) {
        continue label$7
       }
       break label$7;
      };
      HEAP32[$5_1 >> 2] = 0;
     }
     if (!$3_1) {
      break label$1
     }
     $1_1 = ((HEAP32[($0_1 + 28 | 0) >> 2] | 0) << 2 | 0) + 1049716 | 0;
     if (($0_1 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
      HEAP32[($3_1 + ((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
      if (!$2_1) {
       break label$1
      }
      break label$2;
     }
     HEAP32[$1_1 >> 2] = $2_1;
     if ($2_1) {
      break label$2
     }
     (wasm2js_i32$0 = 1050128, wasm2js_i32$1 = (HEAP32[1050128 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$1;
    }
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($0_1 | 0) != ($2_1 | 0)) {
     HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
     return;
    }
    (wasm2js_i32$0 = 1050124, wasm2js_i32$1 = (HEAP32[1050124 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $1_1 >>> 3 | 0 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    return;
   }
   HEAP32[($2_1 + 24 | 0) >> 2] = $3_1;
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if ($1_1) {
    HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
   }
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   HEAP32[($2_1 + 20 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = $2_1;
  }
 }
 
 function $17($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $99 = 0, $52_1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 2 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $3_1 + $1_1 | 0;
    $0_1 = $0_1 - $3_1 | 0;
    if (($0_1 | 0) == (HEAP32[1050140 >> 2] | 0 | 0)) {
     if (((HEAP32[($2_1 + 4 | 0) >> 2] | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$2
     }
     HEAP32[1050132 >> 2] = $1_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) & -2 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     break label$1;
    }
    $16($0_1 | 0, $3_1 | 0);
   }
   label$4 : {
    label$5 : {
     label$6 : {
      $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      if (!($3_1 & 2 | 0)) {
       if (($2_1 | 0) == (HEAP32[1050144 >> 2] | 0 | 0)) {
        break label$5
       }
       if (($2_1 | 0) == (HEAP32[1050140 >> 2] | 0 | 0)) {
        break label$4
       }
       $52_1 = $2_1;
       $2_1 = $3_1 & -8 | 0;
       $16($52_1 | 0, $2_1 | 0);
       $1_1 = $1_1 + $2_1 | 0;
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
       HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
       if (($0_1 | 0) != (HEAP32[1050140 >> 2] | 0 | 0)) {
        break label$6
       }
       HEAP32[1050132 >> 2] = $1_1;
       return;
      }
      HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
     }
     if ($1_1 >>> 0 >= 256 >>> 0) {
      $54($0_1 | 0, $1_1 | 0);
      return;
     }
     $2_1 = ($1_1 & 248 | 0) + 1049860 | 0;
     label$9 : {
      $3_1 = HEAP32[1050124 >> 2] | 0;
      $1_1 = 1 << ($1_1 >>> 3 | 0) | 0;
      if (!($3_1 & $1_1 | 0)) {
       HEAP32[1050124 >> 2] = $1_1 | $3_1 | 0;
       $99 = $2_1;
       break label$9;
      }
      $99 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     }
     $1_1 = $99;
     HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
     return;
    }
    HEAP32[1050144 >> 2] = $0_1;
    $1_1 = (HEAP32[1050136 >> 2] | 0) + $1_1 | 0;
    HEAP32[1050136 >> 2] = $1_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    if (($0_1 | 0) != (HEAP32[1050140 >> 2] | 0 | 0)) {
     break label$1
    }
    HEAP32[1050132 >> 2] = 0;
    HEAP32[1050140 >> 2] = 0;
    return;
   }
   HEAP32[1050140 >> 2] = $0_1;
   $1_1 = (HEAP32[1050132 >> 2] | 0) + $1_1 | 0;
   HEAP32[1050132 >> 2] = $1_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
   HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
  }
 }
 
 function $18($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $15_1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = $0_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = 128;
  HEAP32[($1_1 + 12 | 0) >> 2] = 2;
  HEAP32[($1_1 + 8 | 0) >> 2] = 1049120;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = 2;
  HEAP32[($1_1 + 24 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 4 | 0;
  i64toi32_i32$1 = 1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $15_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $1_1;
  HEAP32[($1_1 + 40 | 0) >> 2] = $15_1;
  HEAP32[($1_1 + 44 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$2 = 1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$0 = $1_1;
  HEAP32[($1_1 + 32 | 0) >> 2] = $1_1 | i64toi32_i32$3 | 0;
  HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$2;
  HEAP32[($1_1 + 16 | 0) >> 2] = $1_1 + 32 | 0;
  $2($1_1 + 8 | 0 | 0, 1048848 | 0);
  wasm2js_trap();
 }
 
 function $19($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0;
  i64toi32_i32$1 = 0;
  return $20(HEAP32[$0_1 >> 2] | 0 | 0, i64toi32_i32$1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $20($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $7_1 = 0, $3_1 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $7$hi = 0, $5_1 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $20_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $21_1 = 0, $25$hi = 0, $8_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $2_1 = 39;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 1e4;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
    i64toi32_i32$2 = i64toi32_i32$0;
    $7_1 = $0_1;
    $7$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $3_1 = ($4_1 + 9 | 0) + $2_1 | 0;
    $21_1 = $3_1 - 4 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 1e4 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $7_1 = i64toi32_i32$0;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$2 | 0, 55536 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $25$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $25$hi;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $6_1 = (($5_1 & 65535 | 0) >>> 0) / (100 >>> 0) | 0;
    $20_1 = ($6_1 << 1 | 0) + 1048866 | 0;
    $22_1 = $21_1;
    $23_1 = HEAPU8[$20_1 >> 0] | 0 | ((HEAPU8[($20_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
    HEAP8[$22_1 >> 0] = $23_1;
    HEAP8[($22_1 + 1 | 0) >> 0] = $23_1 >>> 8 | 0;
    $24_1 = (((Math_imul($6_1, -100) + $5_1 | 0) & 65535 | 0) << 1 | 0) + 1048866 | 0;
    $25_1 = $3_1 - 2 | 0;
    $26_1 = HEAPU8[$24_1 >> 0] | 0 | ((HEAPU8[($24_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
    HEAP8[$25_1 >> 0] = $26_1;
    HEAP8[($25_1 + 1 | 0) >> 0] = $26_1 >>> 8 | 0;
    $2_1 = $2_1 - 4 | 0;
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 99999999;
    $8_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $7$hi;
    $0_1 = $7_1;
    $0$hi = i64toi32_i32$2;
    if ($8_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 99;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$2;
    $3_1 = $7_1;
    break label$4;
   }
   $2_1 = $2_1 - 2 | 0;
   i64toi32_i32$1 = $7$hi;
   $5_1 = $7_1;
   $3_1 = (($7_1 & 65535 | 0) >>> 0) / (100 >>> 0) | 0;
   $27_1 = (((Math_imul($3_1, -100) + $7_1 | 0) & 65535 | 0) << 1 | 0) + 1048866 | 0;
   $28_1 = $2_1 + ($4_1 + 9 | 0) | 0;
   $29_1 = HEAPU8[$27_1 >> 0] | 0 | ((HEAPU8[($27_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
   HEAP8[$28_1 >> 0] = $29_1;
   HEAP8[($28_1 + 1 | 0) >> 0] = $29_1 >>> 8 | 0;
  }
  label$6 : {
   if ($3_1 >>> 0 >= 10 >>> 0) {
    $2_1 = $2_1 - 2 | 0;
    $30_1 = ($3_1 << 1 | 0) + 1048866 | 0;
    $31_1 = $2_1 + ($4_1 + 9 | 0) | 0;
    $32_1 = HEAPU8[$30_1 >> 0] | 0 | ((HEAPU8[($30_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
    HEAP8[$31_1 >> 0] = $32_1;
    HEAP8[($31_1 + 1 | 0) >> 0] = $32_1 >>> 8 | 0;
    break label$6;
   }
   $2_1 = $2_1 - 1 | 0;
   HEAP8[($2_1 + ($4_1 + 9 | 0) | 0) >> 0] = $3_1 | 48 | 0;
  }
  $9_1 = $21($1_1 | 0, 1 | 0, 0 | 0, ($4_1 + 9 | 0) + $2_1 | 0 | 0, 39 - $2_1 | 0 | 0) | 0;
  global$0 = $4_1 + 48 | 0;
  return $9_1 | 0;
 }
 
 function $21($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $5_1 = $7_1 & 1 | 0;
  $10_1 = $5_1 ? 43 : 1114112;
  $6_1 = $4_1 + $5_1 | 0;
  label$1 : {
   if (!($7_1 & 4 | 0)) {
    $1_1 = 0;
    break label$1;
   }
   label$3 : {
    if (!$2_1) {
     break label$3
    }
    $8_1 = $2_1 & 3 | 0;
    if (!$8_1) {
     break label$3
    }
    $5_1 = $1_1;
    label$4 : while (1) {
     $9_1 = $9_1 + ((HEAP8[$5_1 >> 0] | 0 | 0) > (-65 | 0)) | 0;
     $5_1 = $5_1 + 1 | 0;
     $8_1 = $8_1 - 1 | 0;
     if ($8_1) {
      continue label$4
     }
     break label$4;
    };
   }
   $6_1 = $6_1 + $9_1 | 0;
  }
  if (!(HEAP32[$0_1 >> 2] | 0)) {
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if ($22($5_1 | 0, $0_1 | 0, $10_1 | 0, $1_1 | 0, $2_1 | 0) | 0) {
    return 1 | 0
   }
   return FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0]($5_1, $3_1, $4_1) | 0 | 0;
  }
  label$7 : {
   label$8 : {
    label$9 : {
     $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if ($6_1 >>> 0 >= $8_1 >>> 0) {
      $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      $0_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      if (!($22($5_1 | 0, $0_1 | 0, $10_1 | 0, $1_1 | 0, $2_1 | 0) | 0)) {
       break label$9
      }
      return 1 | 0;
     }
     if (!($7_1 & 8 | 0)) {
      break label$8
     }
     $11_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     HEAP32[($0_1 + 16 | 0) >> 2] = 48;
     $12_1 = HEAPU8[($0_1 + 32 | 0) >> 0] | 0;
     $5_1 = 1;
     HEAP8[($0_1 + 32 | 0) >> 0] = 1;
     $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     $9_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if ($22($7_1 | 0, $9_1 | 0, $10_1 | 0, $1_1 | 0, $2_1 | 0) | 0) {
      break label$7
     }
     $5_1 = ($8_1 - $6_1 | 0) + 1 | 0;
     label$11 : {
      label$12 : while (1) {
       $5_1 = $5_1 - 1 | 0;
       if (!$5_1) {
        break label$11
       }
       if (!(FUNCTION_TABLE[HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0]($7_1, 48) | 0)) {
        continue label$12
       }
       break label$12;
      };
      return 1 | 0;
     }
     if (FUNCTION_TABLE[HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0]($7_1, $3_1, $4_1) | 0) {
      return 1 | 0
     }
     HEAP8[($0_1 + 32 | 0) >> 0] = $12_1;
     HEAP32[($0_1 + 16 | 0) >> 2] = $11_1;
     return 0 | 0;
    }
    $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0]($5_1, $3_1, $4_1) | 0;
    break label$7;
   }
   $6_1 = $8_1 - $6_1 | 0;
   label$14 : {
    label$15 : {
     label$16 : {
      $5_1 = HEAPU8[($0_1 + 32 | 0) >> 0] | 0;
      switch ($5_1 - 1 | 0 | 0) {
      case 1:
       break label$15;
      case 0:
      case 2:
       break label$16;
      default:
       break label$14;
      };
     }
     $5_1 = $6_1;
     $6_1 = 0;
     break label$14;
    }
    $5_1 = $6_1 >>> 1 | 0;
    $6_1 = ($6_1 + 1 | 0) >>> 1 | 0;
   }
   $5_1 = $5_1 + 1 | 0;
   $8_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   label$17 : {
    label$18 : while (1) {
     $5_1 = $5_1 - 1 | 0;
     if (!$5_1) {
      break label$17
     }
     if (!(FUNCTION_TABLE[HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0]($0_1, $8_1) | 0)) {
      continue label$18
     }
     break label$18;
    };
    return 1 | 0;
   }
   $5_1 = 1;
   if ($22($0_1 | 0, $7_1 | 0, $10_1 | 0, $1_1 | 0, $2_1 | 0) | 0) {
    break label$7
   }
   if (FUNCTION_TABLE[HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0]($0_1, $3_1, $4_1) | 0) {
    break label$7
   }
   $5_1 = 0;
   label$19 : while (1) {
    if (($5_1 | 0) == ($6_1 | 0)) {
     return 0 | 0
    }
    $5_1 = $5_1 + 1 | 0;
    if (!(FUNCTION_TABLE[HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0]($0_1, $8_1) | 0)) {
     continue label$19
    }
    break label$19;
   };
   return ($5_1 - 1 | 0) >>> 0 < $6_1 >>> 0 | 0;
  }
  return $5_1 | 0;
 }
 
 function $22($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (($2_1 | 0) == (1114112 | 0)) {
    break label$1
   }
   if (!(FUNCTION_TABLE[HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0]($0_1, $2_1) | 0)) {
    break label$1
   }
   return 1 | 0;
  }
  if (!$3_1) {
   return 0 | 0
  }
  return FUNCTION_TABLE[HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0]($0_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $23($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $189 = 0, $9_1 = 0, $118 = 0, $128 = 0, $138 = 0;
  $5_1 = ($0_1 + 3 | 0) & -4 | 0;
  $3_1 = $0_1 - $5_1 | 0;
  $7_1 = $1_1 + $3_1 | 0;
  $4_1 = $7_1 & 3 | 0;
  $1_1 = 0;
  if (($0_1 | 0) != ($5_1 | 0)) {
   if ($3_1 >>> 0 <= -4 >>> 0) {
    label$3 : while (1) {
     $6_1 = $0_1 + $8_1 | 0;
     $1_1 = ((($1_1 + ((HEAP8[$6_1 >> 0] | 0 | 0) > (-65 | 0)) | 0) + ((HEAP8[($6_1 + 1 | 0) >> 0] | 0 | 0) > (-65 | 0)) | 0) + ((HEAP8[($6_1 + 2 | 0) >> 0] | 0 | 0) > (-65 | 0)) | 0) + ((HEAP8[($6_1 + 3 | 0) >> 0] | 0 | 0) > (-65 | 0)) | 0;
     $8_1 = $8_1 + 4 | 0;
     if ($8_1) {
      continue label$3
     }
     break label$3;
    }
   }
   label$4 : while (1) {
    $1_1 = $1_1 + ((HEAP8[$0_1 >> 0] | 0 | 0) > (-65 | 0)) | 0;
    $0_1 = $0_1 + 1 | 0;
    $3_1 = $3_1 + 1 | 0;
    if ($3_1) {
     continue label$4
    }
    break label$4;
   };
  }
  label$5 : {
   if (!$4_1) {
    break label$5
   }
   $0_1 = $5_1 + ($7_1 & -4 | 0) | 0;
   $2_1 = (HEAP8[$0_1 >> 0] | 0 | 0) > (-65 | 0);
   if (($4_1 | 0) == (1 | 0)) {
    break label$5
   }
   $2_1 = $2_1 + ((HEAP8[($0_1 + 1 | 0) >> 0] | 0 | 0) > (-65 | 0)) | 0;
   if (($4_1 | 0) == (2 | 0)) {
    break label$5
   }
   $2_1 = $2_1 + ((HEAP8[($0_1 + 2 | 0) >> 0] | 0 | 0) > (-65 | 0)) | 0;
  }
  $3_1 = $7_1 >>> 2 | 0;
  $4_1 = $1_1 + $2_1 | 0;
  label$6 : {
   label$7 : while (1) {
    $2_1 = $5_1;
    if (!$3_1) {
     break label$6
    }
    $6_1 = $3_1 >>> 0 >= 192 >>> 0 ? 192 : $3_1;
    $7_1 = $6_1 & 3 | 0;
    $5_1 = $6_1 << 2 | 0;
    $1_1 = 0;
    if ($3_1 >>> 0 >= 4 >>> 0) {
     $8_1 = $2_1 + ($5_1 & 1008 | 0) | 0;
     $0_1 = $2_1;
     label$9 : while (1) {
      $9_1 = HEAP32[$0_1 >> 2] | 0;
      $118 = $1_1 + ((($9_1 ^ -1 | 0) >>> 7 | 0 | ($9_1 >>> 6 | 0) | 0) & 16843009 | 0) | 0;
      $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $128 = $118 + ((($1_1 ^ -1 | 0) >>> 7 | 0 | ($1_1 >>> 6 | 0) | 0) & 16843009 | 0) | 0;
      $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      $138 = $128 + ((($1_1 ^ -1 | 0) >>> 7 | 0 | ($1_1 >>> 6 | 0) | 0) & 16843009 | 0) | 0;
      $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $1_1 = $138 + ((($1_1 ^ -1 | 0) >>> 7 | 0 | ($1_1 >>> 6 | 0) | 0) & 16843009 | 0) | 0;
      $0_1 = $0_1 + 16 | 0;
      if (($0_1 | 0) != ($8_1 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    $3_1 = $3_1 - $6_1 | 0;
    $5_1 = $2_1 + $5_1 | 0;
    $4_1 = (Math_imul((($1_1 >>> 8 | 0) & 16711935 | 0) + ($1_1 & 16711935 | 0) | 0, 65537) >>> 16 | 0) + $4_1 | 0;
    if (!$7_1) {
     continue label$7
    }
    break label$7;
   };
   label$10 : {
    $0_1 = $2_1 + (($6_1 & 252 | 0) << 2 | 0) | 0;
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = (($1_1 ^ -1 | 0) >>> 7 | 0 | ($1_1 >>> 6 | 0) | 0) & 16843009 | 0;
    $189 = $1_1;
    if (($7_1 | 0) == (1 | 0)) {
     break label$10
    }
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $1_1 = $1_1 + ((($2_1 ^ -1 | 0) >>> 7 | 0 | ($2_1 >>> 6 | 0) | 0) & 16843009 | 0) | 0;
    $189 = $1_1;
    if (($7_1 | 0) == (2 | 0)) {
     break label$10
    }
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $189 = $1_1 + ((($0_1 ^ -1 | 0) >>> 7 | 0 | ($0_1 >>> 6 | 0) | 0) & 16843009 | 0) | 0;
   }
   $0_1 = $189;
   $4_1 = (Math_imul((($0_1 >>> 8 | 0) & 459007 | 0) + ($0_1 & 16711935 | 0) | 0, 65537) >>> 16 | 0) + $4_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $24($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $45_1 = 0, $8_1 = 0, $87 = 0, $9_1 = 0, $75 = 0, $76 = 0;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $4_1 = HEAP32[$0_1 >> 2] | 0;
  label$1 : {
   $0_1 = !((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & 1 | 0);
   $8_1 = HEAP32[$1_1 >> 2] | 0;
   if (!($0_1 & !$8_1 | 0)) {
    label$3 : {
     if ($0_1) {
      break label$3
     }
     $9_1 = $3_1 + $4_1 | 0;
     label$4 : {
      $7_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      if (!$7_1) {
       $2_1 = $4_1;
       break label$4;
      }
      $2_1 = $4_1;
      label$6 : while (1) {
       $0_1 = $2_1;
       if (($0_1 | 0) == ($9_1 | 0)) {
        break label$3
       }
       label$7 : {
        $2_1 = HEAP8[$0_1 >> 0] | 0;
        $45_1 = $0_1 + 1 | 0;
        if (($2_1 | 0) >= (0 | 0)) {
         break label$7
        }
        $45_1 = $0_1 + 2 | 0;
        if ($2_1 >>> 0 < -32 >>> 0) {
         break label$7
        }
        $45_1 = $0_1 + 3 | 0;
        if ($2_1 >>> 0 < -16 >>> 0) {
         break label$7
        }
        $45_1 = $0_1 + 4 | 0;
       }
       $2_1 = $45_1;
       $6_1 = ($2_1 - $0_1 | 0) + $6_1 | 0;
       $5_1 = $5_1 + 1 | 0;
       if (($7_1 | 0) != ($5_1 | 0)) {
        continue label$6
       }
       break label$6;
      };
     }
     if (($2_1 | 0) == ($9_1 | 0)) {
      break label$3
     }
     HEAP8[$2_1 >> 0] | 0;
     $75 = $6_1;
     $76 = $3_1;
     label$8 : {
      label$9 : {
       if (!$6_1) {
        break label$9
       }
       if ($3_1 >>> 0 > $6_1 >>> 0) {
        if ((HEAP8[($4_1 + $6_1 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
         break label$9
        }
        $87 = 0;
        break label$8;
       }
       if (($3_1 | 0) == ($6_1 | 0)) {
        break label$9
       }
       $87 = 0;
       break label$8;
      }
      $87 = $4_1;
     }
     $0_1 = $87;
     $3_1 = $0_1 ? $75 : $76;
     $4_1 = $0_1 ? $0_1 : $4_1;
    }
    if (!$8_1) {
     break label$1
    }
    $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    label$11 : {
     if ($3_1 >>> 0 >= 16 >>> 0) {
      $2_1 = $23($4_1 | 0, $3_1 | 0) | 0;
      break label$11;
     }
     if (!$3_1) {
      $2_1 = 0;
      break label$11;
     }
     $6_1 = $3_1 & 3 | 0;
     label$14 : {
      if ($3_1 >>> 0 < 4 >>> 0) {
       $2_1 = 0;
       $7_1 = 0;
       break label$14;
      }
      $2_1 = 0;
      $0_1 = $4_1;
      $7_1 = $3_1 & 12 | 0;
      $5_1 = $7_1;
      label$16 : while (1) {
       $2_1 = ((($2_1 + ((HEAP8[$0_1 >> 0] | 0 | 0) > (-65 | 0)) | 0) + ((HEAP8[($0_1 + 1 | 0) >> 0] | 0 | 0) > (-65 | 0)) | 0) + ((HEAP8[($0_1 + 2 | 0) >> 0] | 0 | 0) > (-65 | 0)) | 0) + ((HEAP8[($0_1 + 3 | 0) >> 0] | 0 | 0) > (-65 | 0)) | 0;
       $0_1 = $0_1 + 4 | 0;
       $5_1 = $5_1 - 4 | 0;
       if ($5_1) {
        continue label$16
       }
       break label$16;
      };
     }
     if (!$6_1) {
      break label$11
     }
     $0_1 = $4_1 + $7_1 | 0;
     label$17 : while (1) {
      $2_1 = $2_1 + ((HEAP8[$0_1 >> 0] | 0 | 0) > (-65 | 0)) | 0;
      $0_1 = $0_1 + 1 | 0;
      $6_1 = $6_1 - 1 | 0;
      if ($6_1) {
       continue label$17
      }
      break label$17;
     };
    }
    label$18 : {
     if ($2_1 >>> 0 < $8_1 >>> 0) {
      $5_1 = $8_1 - $2_1 | 0;
      $0_1 = 0;
      label$20 : {
       label$21 : {
        switch ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) - 1 | 0 | 0) {
        case 0:
         $0_1 = $5_1;
         $5_1 = 0;
         break label$20;
        case 1:
         break label$21;
        default:
         break label$20;
        };
       }
       $0_1 = $5_1 >>> 1 | 0;
       $5_1 = ($5_1 + 1 | 0) >>> 1 | 0;
      }
      $0_1 = $0_1 + 1 | 0;
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      $1_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      label$23 : while (1) {
       $0_1 = $0_1 - 1 | 0;
       if (!$0_1) {
        break label$18
       }
       if (!(FUNCTION_TABLE[HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0]($1_1, $2_1) | 0)) {
        continue label$23
       }
       break label$23;
      };
      return 1 | 0;
     }
     break label$1;
    }
    if (FUNCTION_TABLE[HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0]($1_1, $4_1, $3_1) | 0) {
     return 1 | 0
    }
    $0_1 = 0;
    label$25 : while (1) {
     if (($0_1 | 0) == ($5_1 | 0)) {
      return 0 | 0
     }
     $0_1 = $0_1 + 1 | 0;
     if (!(FUNCTION_TABLE[HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0]($1_1, $2_1) | 0)) {
      continue label$25
     }
     break label$25;
    };
    return ($0_1 - 1 | 0) >>> 0 < $5_1 >>> 0 | 0;
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[($1_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 20 | 0) >> 2] | 0, $4_1, $3_1) | 0 | 0;
  }
  return FUNCTION_TABLE[HEAP32[((HEAP32[($1_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 20 | 0) >> 2] | 0, $4_1, $3_1) | 0 | 0;
 }
 
 function $25($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $1_1) | 0 | 0;
 }
 
 function $26($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $140 = 0, $13_1 = 0, $69 = 0, $14_1 = 0;
  $13_1 = $1_1 - 1 | 0;
  $10_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $11_1 = HEAP32[$0_1 >> 2] | 0;
  $12_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if ($6_1) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if ($2_1 >>> 0 < $4_1 >>> 0) {
       break label$4
      }
      label$5 : while (1) {
       $6_1 = $1_1 + $4_1 | 0;
       label$6 : {
        label$7 : {
         label$8 : {
          $7_1 = $2_1 - $4_1 | 0;
          if ($7_1 >>> 0 <= 7 >>> 0) {
           if (($2_1 | 0) != ($4_1 | 0)) {
            break label$8
           }
           $4_1 = $2_1;
           break label$4;
          }
          label$10 : {
           $5_1 = ($6_1 + 3 | 0) & -4 | 0;
           $3_1 = $5_1 - $6_1 | 0;
           if ($3_1) {
            $0_1 = 0;
            label$12 : while (1) {
             if ((HEAPU8[($0_1 + $6_1 | 0) >> 0] | 0 | 0) == (10 | 0)) {
              break label$6
             }
             $0_1 = $0_1 + 1 | 0;
             if (($3_1 | 0) != ($0_1 | 0)) {
              continue label$12
             }
             break label$12;
            };
            $0_1 = $7_1 - 8 | 0;
            if ($3_1 >>> 0 <= $0_1 >>> 0) {
             break label$10
            }
            break label$7;
           }
           $0_1 = $7_1 - 8 | 0;
          }
          label$13 : while (1) {
           $9_1 = HEAP32[$5_1 >> 2] | 0;
           $69 = 16843008 - ($9_1 ^ 168430090 | 0) | 0 | $9_1 | 0;
           $9_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
           if ((($69 & (16843008 - ($9_1 ^ 168430090 | 0) | 0 | $9_1 | 0) | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
            break label$7
           }
           $5_1 = $5_1 + 8 | 0;
           $3_1 = $3_1 + 8 | 0;
           if ($3_1 >>> 0 <= $0_1 >>> 0) {
            continue label$13
           }
           break label$13;
          };
          break label$7;
         }
         $0_1 = 0;
         label$14 : while (1) {
          if ((HEAPU8[($0_1 + $6_1 | 0) >> 0] | 0 | 0) == (10 | 0)) {
           break label$6
          }
          $0_1 = $0_1 + 1 | 0;
          if (($7_1 | 0) != ($0_1 | 0)) {
           continue label$14
          }
          break label$14;
         };
         $4_1 = $2_1;
         break label$4;
        }
        if (($3_1 | 0) == ($7_1 | 0)) {
         $4_1 = $2_1;
         break label$4;
        }
        $5_1 = $3_1 + $6_1 | 0;
        $7_1 = ($2_1 - $3_1 | 0) - $4_1 | 0;
        $0_1 = 0;
        label$16 : {
         label$17 : while (1) {
          if ((HEAPU8[($0_1 + $5_1 | 0) >> 0] | 0 | 0) == (10 | 0)) {
           break label$16
          }
          $0_1 = $0_1 + 1 | 0;
          if (($7_1 | 0) != ($0_1 | 0)) {
           continue label$17
          }
          break label$17;
         };
         $4_1 = $2_1;
         break label$4;
        }
        $0_1 = $0_1 + $3_1 | 0;
       }
       $3_1 = $0_1 + $4_1 | 0;
       $4_1 = $3_1 + 1 | 0;
       label$18 : {
        if ($2_1 >>> 0 <= $3_1 >>> 0) {
         break label$18
        }
        if ((HEAPU8[($0_1 + $6_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
         break label$18
        }
        $6_1 = 0;
        $3_1 = $4_1;
        $140 = $3_1;
        break label$3;
       }
       if ($2_1 >>> 0 >= $4_1 >>> 0) {
        continue label$5
       }
       break label$5;
      };
     }
     if (($2_1 | 0) == ($8_1 | 0)) {
      break label$1
     }
     $6_1 = 1;
     $3_1 = $8_1;
     $140 = $2_1;
    }
    $0_1 = $140;
    label$19 : {
     if (HEAPU8[$12_1 >> 0] | 0) {
      if (FUNCTION_TABLE[HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0]($11_1, 1048816, 4) | 0) {
       break label$19
      }
     }
     $5_1 = 0;
     if (($0_1 | 0) != ($8_1 | 0)) {
      $5_1 = (HEAPU8[($0_1 + $13_1 | 0) >> 0] | 0 | 0) == (10 | 0)
     }
     $0_1 = $0_1 - $8_1 | 0;
     $7_1 = $1_1 + $8_1 | 0;
     HEAP8[$12_1 >> 0] = $5_1;
     $8_1 = $3_1;
     if (!(FUNCTION_TABLE[HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0]($11_1, $7_1, $0_1) | 0)) {
      continue label$2
     }
    }
    break label$2;
   };
   $14_1 = 1;
  }
  return $14_1 | 0;
 }
 
 function $27($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    break label$1
   }
   if (!(FUNCTION_TABLE[HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0]($3_1, 1048816, 4) | 0)) {
    break label$1
   }
   return 1 | 0;
  }
  HEAP8[$0_1 >> 0] = ($1_1 | 0) == (10 | 0);
  return FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0]($3_1, $1_1) | 0 | 0;
 }
 
 function $28($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $13($0_1 | 0, 1048792 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $29($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[$1_1 >> 2] | 0;
     if (!$2_1) {
      $4_1 = 1;
      if ($3_1) {
       break label$3
      }
      $2_1 = 0;
      $1_1 = 0;
      break label$1;
     }
     $2_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - $2_1 | 0;
     if ($3_1) {
      break label$2
     }
     $4_1 = 1;
     $1_1 = $2_1;
     break label$1;
    }
    $2_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) - $3_1 | 0;
    $1_1 = $2_1;
    break label$1;
   }
   $1_1 = ((HEAP32[($1_1 + 12 | 0) >> 2] | 0) - $3_1 | 0) + $2_1 | 0;
   $4_1 = $1_1 >>> 0 >= $2_1 >>> 0;
   $2_1 = $1_1 >>> 0 < $2_1 >>> 0 ? -1 : $1_1;
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $30($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$1_1) {
     $1_1 = 0;
     $3_1 = 1;
     break label$2;
    }
    $4_1 = 1;
    $31($2_1 + 8 | 0 | 0, 1 | 0, $1_1 | 0);
    $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$1
    }
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[$0_1 >> 2] = $1_1;
   global$0 = $2_1 + 16 | 0;
   return;
  }
  $0($4_1 | 0);
  wasm2js_trap();
 }
 
 function $31($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  if ($2_1) {
   $1_1 = $34($2_1 | 0) | 0
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $32($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (((HEAP32[$0_1 >> 2] | 0) - $3_1 | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $33($2_1 + 8 | 0 | 0, $0_1 | 0, $3_1 | 0, $1_1 | 0, 1 | 0, 1 | 0);
   $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   if (($0_1 | 0) == (-2147483647 | 0)) {
    break label$1
   }
   HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   $0($0_1 | 0);
   wasm2js_trap();
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $33($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$4 = 0, $10_1 = 0, $95 = 0, i64toi32_i32$3 = 0, $23_1 = 0, $72 = 0, $28$hi = 0, $49$hi = 0, $11_1 = 0, $11$hi = 0, i64toi32_i32$2 = 0, $60 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  label$1 : {
   $3_1 = $2_1 + $3_1 | 0;
   if ($2_1 >>> 0 > $3_1 >>> 0) {
    $2_1 = 0;
    break label$1;
   }
   $2_1 = 0;
   i64toi32_i32$0 = 0;
   $28$hi = i64toi32_i32$0;
   $7_1 = ($5_1 | 0) == (1 | 0) ? 8 : 4;
   $8_1 = HEAP32[$1_1 >> 2] | 0;
   $9_1 = $8_1 << 1 | 0;
   $3_1 = $3_1 >>> 0 < $9_1 >>> 0 ? $9_1 : $3_1;
   $9_1 = $3_1 >>> 0 < $7_1 >>> 0 ? $7_1 : $3_1;
   i64toi32_i32$0 = 0;
   $49$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $28$hi;
   i64toi32_i32$1 = $49$hi;
   i64toi32_i32$1 = __wasm_i64_mul((($4_1 + $5_1 | 0) - 1 | 0) & (0 - $4_1 | 0) | 0 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $23_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   if ($23_1) {
    break label$1
   }
   i64toi32_i32$1 = $11$hi;
   $7_1 = $11_1;
   if ($7_1 >>> 0 > (-2147483648 - $4_1 | 0) >>> 0) {
    break label$1
   }
   $60 = $6_1;
   if ($8_1) {
    HEAP32[($6_1 + 28 | 0) >> 2] = Math_imul($5_1, $8_1);
    HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $72 = $4_1;
   } else {
    $72 = 0
   }
   HEAP32[($60 + 24 | 0) >> 2] = $72;
   $8_1 = $6_1 + 8 | 0;
   $2_1 = global$0 - 16 | 0;
   global$0 = $2_1;
   label$5 : {
    $5_1 = $6_1 + 20 | 0;
    if (HEAP32[($5_1 + 4 | 0) >> 2] | 0) {
     $10_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     if (!$10_1) {
      $31($2_1 + 8 | 0 | 0, $4_1 | 0, $7_1 | 0);
      $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      $95 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      break label$5;
     }
     $5_1 = $5(HEAP32[$5_1 >> 2] | 0 | 0, $10_1 | 0, $7_1 | 0) | 0;
     $95 = $7_1;
     break label$5;
    }
    $31($2_1 | 0, $4_1 | 0, $7_1 | 0);
    $5_1 = HEAP32[$2_1 >> 2] | 0;
    $95 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   }
   $10_1 = $95;
   HEAP32[($8_1 + 4 | 0) >> 2] = $5_1 ? $5_1 : $4_1;
   HEAP32[$8_1 >> 2] = !$5_1;
   HEAP32[($8_1 + 8 | 0) >> 2] = $5_1 ? $10_1 : $7_1;
   global$0 = $2_1 + 16 | 0;
   if (!(HEAP32[($6_1 + 8 | 0) >> 2] | 0)) {
    $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    HEAP32[$1_1 >> 2] = $9_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
    $2_1 = -2147483647;
    break label$1;
   }
   $3_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = $2_1;
  global$0 = $6_1 + 32 | 0;
 }
 
 function $34($0_1) {
  $0_1 = $0_1 | 0;
  HEAPU8[1049704 >> 0] | 0;
  return $6($0_1 | 0) | 0 | 0;
 }
 
 function $35($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $9_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $73 = 0, $76 = 0;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $4_1 = HEAP32[$0_1 >> 2] | 0;
  $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($1_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 20 | 0) >> 2] | 0, 1048772, 1) | 0;
  label$1 : while (1) {
   $6_1 = $8_1;
   label$2 : {
    label$3 : {
     if ($3_1) {
      $8_1 = 1;
      $10_1 = $0_1 & 1 | 0;
      $0_1 = 1;
      if ($10_1) {
       break label$2
      }
      $9_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      if (!($9_1 & 4 | 0)) {
       if (!($6_1 & 1 | 0)) {
        break label$3
       }
       if (!(FUNCTION_TABLE[HEAP32[((HEAP32[($1_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 20 | 0) >> 2] | 0, 1048820, 2) | 0)) {
        break label$3
       }
       break label$2;
      }
      $5_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      $7_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (!($6_1 & 1 | 0)) {
       if (FUNCTION_TABLE[HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0]($7_1, 1048824, 1) | 0) {
        break label$2
       }
      }
      HEAP8[($2_1 + 27 | 0) >> 0] = 1;
      HEAP32[($2_1 + 16 | 0) >> 2] = $5_1;
      HEAP32[($2_1 + 12 | 0) >> 2] = $7_1;
      HEAP32[($2_1 + 56 | 0) >> 2] = $9_1;
      HEAP32[($2_1 + 52 | 0) >> 2] = 1048792;
      HEAP8[($2_1 + 60 | 0) >> 0] = HEAPU8[($1_1 + 32 | 0) >> 0] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      $73 = i64toi32_i32$0;
      i64toi32_i32$0 = $2_1;
      HEAP32[($2_1 + 36 | 0) >> 2] = $73;
      HEAP32[($2_1 + 40 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $76 = i64toi32_i32$1;
      i64toi32_i32$1 = $2_1;
      HEAP32[($2_1 + 28 | 0) >> 2] = $76;
      HEAP32[($2_1 + 32 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($2_1 + 20 | 0) >> 2] = $2_1 + 27 | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = $2_1 + 12 | 0;
      if (!($36($4_1 | 0, $2_1 + 28 | 0 | 0) | 0)) {
       $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($2_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 48 | 0) >> 2] | 0, 1048822, 2) | 0;
       break label$2;
      }
      break label$2;
     }
     $3_1 = 1;
     if (!($0_1 & 1 | 0)) {
      $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($1_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 20 | 0) >> 2] | 0, 1048825, 1) | 0
     }
     global$0 = $2_1 - -64 | 0;
     return $3_1 | 0;
    }
    $0_1 = $36($4_1 | 0, $1_1 | 0) | 0;
   }
   $4_1 = $4_1 + 1 | 0;
   $3_1 = $3_1 - 1 | 0;
   continue label$1;
  };
 }
 
 function $36($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $22_1 = 0, i64toi32_i32$1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
     if (!($2_1 & 16 | 0)) {
      if ($2_1 & 32 | 0) {
       break label$3
      }
      i64toi32_i32$1 = 0;
      $22_1 = $20(HEAPU8[$0_1 >> 0] | 0 | 0, i64toi32_i32$1 | 0, $1_1 | 0) | 0;
      break label$1;
     }
     $0_1 = HEAPU8[$0_1 >> 0] | 0;
     $2_1 = 127;
     label$5 : while (1) {
      $3_1 = $2_1;
      $5_1 = $4_1 + $2_1 | 0;
      $2_1 = $0_1 & 15 | 0;
      HEAP8[$5_1 >> 0] = $2_1 >>> 0 < 10 >>> 0 ? $2_1 | 48 | 0 : $2_1 + 87 | 0;
      $2_1 = $3_1 - 1 | 0;
      $6_1 = $0_1 & 255 | 0;
      $0_1 = $6_1 >>> 4 | 0;
      if ($6_1 >>> 0 >= 16 >>> 0) {
       continue label$5
      }
      break label$5;
     };
     break label$2;
    }
    $0_1 = HEAPU8[$0_1 >> 0] | 0;
    $2_1 = 127;
    label$6 : while (1) {
     $3_1 = $2_1;
     $5_1 = $4_1 + $2_1 | 0;
     $2_1 = $0_1 & 15 | 0;
     HEAP8[$5_1 >> 0] = $2_1 >>> 0 < 10 >>> 0 ? $2_1 | 48 | 0 : $2_1 + 55 | 0;
     $2_1 = $3_1 - 1 | 0;
     $6_1 = $0_1 & 255 | 0;
     $0_1 = $6_1 >>> 4 | 0;
     if ($6_1 >>> 0 >= 16 >>> 0) {
      continue label$6
     }
     break label$6;
    };
    if ($3_1 >>> 0 >= 129 >>> 0) {
     $18($3_1 | 0);
     wasm2js_trap();
    }
    $22_1 = $21($1_1 | 0, 1048864 | 0, 2 | 0, $5_1 | 0, 128 - $3_1 | 0 | 0) | 0;
    break label$1;
   }
   if ($3_1 >>> 0 >= 129 >>> 0) {
    $18($3_1 | 0);
    wasm2js_trap();
   }
   $22_1 = $21($1_1 | 0, 1048864 | 0, 2 | 0, $5_1 | 0, 128 - $3_1 | 0 | 0) | 0;
  }
  global$0 = $4_1 + 128 | 0;
  return $22_1 | 0;
 }
 
 function $37($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  if ($0_1) {
   $9($1_1 | 0, Math_imul($0_1, $2_1) | 0)
  }
 }
 
 function $38($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $34($0_1 + 20 | 0 | 0) | 0;
  HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = 0;
  HEAP32[$2_1 >> 2] = $2_1;
  return $2_1 | 0;
 }
 
 function $39($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $8_1 = 0;
  $0_1 = $38($2_1 | 0, $0_1 | 0) | 0;
  $8_1 = $1_1;
  $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $57($0_1 + 20 | 0 | 0, $8_1 | 0, ($1_1 >>> 0 < $2_1 >>> 0 ? $1_1 : $2_1) | 0) | 0;
  return $0_1 | 0;
 }
 
 function $40($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $67 = 0, $11_1 = 0, $12_1 = 0, $123 = 0, $204 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       switch ($2_1 | 0) {
       case 1:
        break label$3;
       case 0:
        break label$5;
       default:
        break label$4;
       };
      }
      $3_1 = $0_1 + 20 | 0;
      $10_1 = HEAP32[1049700 >> 2] | 0;
      $4_1 = $10_1 << 2 | 0;
      $11_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 20 | 0;
      $2_1 = HEAP32[1049696 >> 2] | 0;
      $1_1 = $2_1;
      label$6 : while (1) {
       if (!$4_1) {
        break label$1
       }
       if ((HEAP32[$1_1 >> 2] | 0 | 0) == ($3_1 | 0)) {
        break label$2
       }
       $4_1 = $4_1 - 4 | 0;
       $6_1 = $6_1 + 1 | 0;
       $1_1 = $1_1 + 4 | 0;
       continue label$6;
      };
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 - 1 | 0;
    }
    $9($0_1 | 0, 20 | 0);
    return;
   }
   label$7 : {
    label$8 : {
     label$9 : {
      $7_1 = ($10_1 + ($6_1 ^ -1 | 0) | 0) << 2 | 0;
      $2_1 = $2_1 + ($6_1 << 2 | 0) | 0;
      $1_1 = $2_1 + 4 | 0;
      if ($7_1 >>> 0 > ($2_1 - $1_1 | 0) >>> 0) {
       $8_1 = $1_1 + $7_1 | 0;
       $3_1 = $2_1 + $7_1 | 0;
       $67 = $2_1;
       if ($7_1 >>> 0 < 16 >>> 0) {
        break label$8
       }
       $5_1 = $3_1 & -4 | 0;
       $6_1 = $3_1 & 3 | 0;
       $12_1 = 0 - $6_1 | 0;
       if ($6_1) {
        $4_1 = $8_1 - 1 | 0;
        label$12 : while (1) {
         $3_1 = $3_1 - 1 | 0;
         HEAP8[$3_1 >> 0] = HEAPU8[$4_1 >> 0] | 0;
         $4_1 = $4_1 - 1 | 0;
         if ($3_1 >>> 0 > $5_1 >>> 0) {
          continue label$12
         }
         break label$12;
        };
       }
       $7_1 = $7_1 - $6_1 | 0;
       $9_1 = $7_1 & -4 | 0;
       $3_1 = $5_1 - $9_1 | 0;
       $8_1 = $12_1 + $8_1 | 0;
       if ($8_1 & 3 | 0) {
        if (($9_1 | 0) <= (0 | 0)) {
         break label$9
        }
        $2_1 = $8_1 << 3 | 0;
        $6_1 = $2_1 & 24 | 0;
        $4_1 = $8_1 & -4 | 0;
        $1_1 = $4_1 - 4 | 0;
        $2_1 = (0 - $2_1 | 0) & 24 | 0;
        $4_1 = HEAP32[$4_1 >> 2] | 0;
        label$14 : while (1) {
         $5_1 = $5_1 - 4 | 0;
         $123 = $4_1 << $2_1 | 0;
         $4_1 = HEAP32[$1_1 >> 2] | 0;
         HEAP32[$5_1 >> 2] = $123 | ($4_1 >>> $6_1 | 0) | 0;
         $1_1 = $1_1 - 4 | 0;
         if ($3_1 >>> 0 < $5_1 >>> 0) {
          continue label$14
         }
         break label$14;
        };
        break label$9;
       }
       if (($9_1 | 0) <= (0 | 0)) {
        break label$9
       }
       $1_1 = ($1_1 + $7_1 | 0) - 4 | 0;
       label$15 : while (1) {
        $5_1 = $5_1 - 4 | 0;
        HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
        $1_1 = $1_1 - 4 | 0;
        if ($3_1 >>> 0 < $5_1 >>> 0) {
         continue label$15
        }
        break label$15;
       };
       break label$9;
      }
      label$16 : {
       if ($7_1 >>> 0 < 16 >>> 0) {
        $3_1 = $2_1;
        break label$16;
       }
       $6_1 = (0 - $2_1 | 0) & 3 | 0;
       $5_1 = $2_1 + $6_1 | 0;
       if ($6_1) {
        $3_1 = $2_1;
        $4_1 = $1_1;
        label$19 : while (1) {
         HEAP8[$3_1 >> 0] = HEAPU8[$4_1 >> 0] | 0;
         $4_1 = $4_1 + 1 | 0;
         $3_1 = $3_1 + 1 | 0;
         if ($3_1 >>> 0 < $5_1 >>> 0) {
          continue label$19
         }
         break label$19;
        };
       }
       $8_1 = $7_1 - $6_1 | 0;
       $9_1 = $8_1 & -4 | 0;
       $3_1 = $5_1 + $9_1 | 0;
       label$20 : {
        $2_1 = $1_1 + $6_1 | 0;
        if ($2_1 & 3 | 0) {
         if (($9_1 | 0) <= (0 | 0)) {
          break label$20
         }
         $6_1 = $2_1 << 3 | 0;
         $7_1 = $6_1 & 24 | 0;
         $4_1 = $2_1 & -4 | 0;
         $1_1 = $4_1 + 4 | 0;
         $6_1 = (0 - $6_1 | 0) & 24 | 0;
         $4_1 = HEAP32[$4_1 >> 2] | 0;
         label$22 : while (1) {
          $204 = $4_1 >>> $7_1 | 0;
          $4_1 = HEAP32[$1_1 >> 2] | 0;
          HEAP32[$5_1 >> 2] = $204 | ($4_1 << $6_1 | 0) | 0;
          $1_1 = $1_1 + 4 | 0;
          $5_1 = $5_1 + 4 | 0;
          if ($5_1 >>> 0 < $3_1 >>> 0) {
           continue label$22
          }
          break label$22;
         };
         break label$20;
        }
        if (($9_1 | 0) <= (0 | 0)) {
         break label$20
        }
        $1_1 = $2_1;
        label$23 : while (1) {
         HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
         $1_1 = $1_1 + 4 | 0;
         $5_1 = $5_1 + 4 | 0;
         if ($5_1 >>> 0 < $3_1 >>> 0) {
          continue label$23
         }
         break label$23;
        };
       }
       $7_1 = $8_1 & 3 | 0;
       $1_1 = $2_1 + $9_1 | 0;
      }
      if (!$7_1) {
       break label$7
      }
      $2_1 = $3_1 + $7_1 | 0;
      label$24 : while (1) {
       HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       $1_1 = $1_1 + 1 | 0;
       $3_1 = $3_1 + 1 | 0;
       if ($3_1 >>> 0 < $2_1 >>> 0) {
        continue label$24
       }
       break label$24;
      };
      break label$7;
     }
     $2_1 = $7_1 & 3 | 0;
     if (!$2_1) {
      break label$7
     }
     $8_1 = $8_1 - $9_1 | 0;
     $67 = $3_1 - $2_1 | 0;
    }
    $2_1 = $67;
    $1_1 = $8_1 - 1 | 0;
    label$25 : while (1) {
     $3_1 = $3_1 - 1 | 0;
     HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
     $1_1 = $1_1 - 1 | 0;
     if ($2_1 >>> 0 < $3_1 >>> 0) {
      continue label$25
     }
     break label$25;
    };
   }
   HEAP32[1049700 >> 2] = $10_1 - 1 | 0;
  }
  $9($0_1 | 0, $11_1 | 0);
 }
 
 function $41($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $27_1 = 0;
  $2_1 = $1_1 - 20 | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) + 1 | 0;
  $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
  if ($3_1 >>> 0 <= 3 >>> 0) {
   $0_1 = global$0 - 48 | 0;
   global$0 = $0_1;
   HEAP32[$0_1 >> 2] = 4;
   HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[($0_1 + 12 | 0) >> 2] = 2;
   HEAP32[($0_1 + 8 | 0) >> 2] = 1049152;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 2;
   HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $0_1 + 4 | 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $27_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = $0_1;
   HEAP32[($0_1 + 40 | 0) >> 2] = $27_1;
   HEAP32[($0_1 + 44 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $0_1;
   i64toi32_i32$2 = 1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 32 | 0) >> 2] = $0_1 | i64toi32_i32$3 | 0;
   HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$2;
   HEAP32[($0_1 + 16 | 0) >> 2] = $0_1 + 32 | 0;
   $2($0_1 + 8 | 0 | 0, 1049412 | 0);
   wasm2js_trap();
  }
  $1_1 = (HEAPU8[$1_1 >> 0] | 0 | ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0) - 20 | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $42($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  if ($2_1 >>> 0 >= 2 >>> 0) {
   HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 - 1 | 0
  }
  $0_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  if ($0_1 >>> 0 >= 2 >>> 0) {
   HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 - 1 | 0
  }
 }
 
 function $43($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $12_1 = 0, $152 = 0, $8_1 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  label$1 : {
   if ($1_1 >>> 0 >= 16 >>> 0) {
    $4_1 = $23($0_1 | 0, $1_1 | 0) | 0;
    break label$1;
   }
   if (!$1_1) {
    break label$1
   }
   $5_1 = $1_1 & 3 | 0;
   if ($1_1 >>> 0 >= 4 >>> 0) {
    $3_1 = $0_1;
    $7_1 = $1_1 & 12 | 0;
    $6_1 = $7_1;
    label$4 : while (1) {
     $4_1 = ((($4_1 + ((HEAP8[$3_1 >> 0] | 0 | 0) > (-65 | 0)) | 0) + ((HEAP8[($3_1 + 1 | 0) >> 0] | 0 | 0) > (-65 | 0)) | 0) + ((HEAP8[($3_1 + 2 | 0) >> 0] | 0 | 0) > (-65 | 0)) | 0) + ((HEAP8[($3_1 + 3 | 0) >> 0] | 0 | 0) > (-65 | 0)) | 0;
     $3_1 = $3_1 + 4 | 0;
     $6_1 = $6_1 - 4 | 0;
     if ($6_1) {
      continue label$4
     }
     break label$4;
    };
   }
   if (!$5_1) {
    break label$1
   }
   $3_1 = $0_1 + $7_1 | 0;
   label$5 : while (1) {
    $4_1 = $4_1 + ((HEAP8[$3_1 >> 0] | 0 | 0) > (-65 | 0)) | 0;
    $3_1 = $3_1 + 1 | 0;
    $5_1 = $5_1 - 1 | 0;
    if ($5_1) {
     continue label$5
    }
    break label$5;
   };
  }
  $5_1 = $2_1 + 48 | 0;
  HEAP32[($2_1 + 32 | 0) >> 2] = $5_1;
  HEAP16[($2_1 + 46 | 0) >> 1] = $4_1;
  HEAP32[($2_1 + 36 | 0) >> 2] = $0_1;
  HEAP32[($2_1 + 40 | 0) >> 2] = $0_1 + $1_1 | 0;
  HEAP32[($2_1 + 28 | 0) >> 2] = $2_1 + 46 | 0;
  $4_1 = $2_1 + 28 | 0;
  $29($2_1 + 60 | 0 | 0, $4_1 | 0);
  label$6 : {
   if ((HEAP32[($2_1 + 64 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    $30($2_1 + 16 | 0 | 0, HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0);
    $3_1 = 0;
    HEAP32[($2_1 + 56 | 0) >> 2] = 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    HEAP32[($2_1 + 52 | 0) >> 2] = i64toi32_i32$1;
    $29($2_1 + 72 | 0 | 0, $4_1 | 0);
    if ((HEAP32[($2_1 + 76 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     $32($5_1 | 0, HEAP32[($2_1 + 80 | 0) >> 2] | 0 | 0);
     $5_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
     $6_1 = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
     $4_1 = $5_1 + $6_1 | 0;
     label$9 : while (1) {
      HEAP8[($3_1 + $4_1 | 0) >> 0] = HEAPU8[(($2_1 + 46 | 0) + $3_1 | 0) >> 0] | 0;
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != (2 | 0)) {
       continue label$9
      }
      break label$9;
     };
     if ($1_1) {
      $7_1 = $3_1 + $4_1 | 0;
      $4_1 = 0;
      label$11 : while (1) {
       HEAP8[($4_1 + $7_1 | 0) >> 0] = HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0;
       $4_1 = $4_1 + 1 | 0;
       if (($1_1 | 0) != ($4_1 | 0)) {
        continue label$11
       }
       break label$11;
      };
      $152 = ($3_1 + $6_1 | 0) + $4_1 | 0;
     } else {
      $152 = $3_1 + $6_1 | 0
     }
     $0_1 = $152;
     $7_1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
     $6_1 = $39(1 | 0, $5_1 | 0, $0_1 | 0) | 0;
     HEAP32[($2_1 + 36 | 0) >> 2] = $0_1;
     $0_1 = $6_1 + 20 | 0;
     HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
     HEAP32[($2_1 + 28 | 0) >> 2] = $0_1;
     $30($2_1 + 8 | 0 | 0, 12 | 0);
     $1_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
     HEAP32[($2_1 + 76 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 72 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     $4_1 = 0;
     $3_1 = 0;
     label$13 : while (1) {
      HEAP32[($2_1 + 80 | 0) >> 2] = $4_1;
      if (($3_1 | 0) == (12 | 0)) {
       break label$6
      }
      $32($2_1 + 72 | 0 | 0, 4 | 0);
      $1_1 = HEAP32[($2_1 + 76 | 0) >> 2] | 0;
      $0_1 = HEAP32[($2_1 + 80 | 0) >> 2] | 0;
      $11_1 = $1_1 + $0_1 | 0;
      $12_1 = HEAP32[(($2_1 + 28 | 0) + $3_1 | 0) >> 2] | 0;
      HEAP8[$11_1 >> 0] = $12_1;
      HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
      HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
      HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
      $3_1 = $3_1 + 4 | 0;
      $4_1 = $0_1 + 4 | 0;
      continue label$13;
     };
    }
    HEAP32[($2_1 + 88 | 0) >> 2] = 0;
    HEAP32[($2_1 + 76 | 0) >> 2] = 1;
    HEAP32[($2_1 + 72 | 0) >> 2] = 1049188;
    i64toi32_i32$1 = 0;
    HEAP32[($2_1 + 80 | 0) >> 2] = 4;
    HEAP32[($2_1 + 84 | 0) >> 2] = i64toi32_i32$1;
    $2($2_1 + 72 | 0 | 0, 1049384 | 0);
    wasm2js_trap();
   }
   HEAP32[($2_1 + 88 | 0) >> 2] = 0;
   HEAP32[($2_1 + 76 | 0) >> 2] = 1;
   HEAP32[($2_1 + 72 | 0) >> 2] = 1049188;
   i64toi32_i32$1 = 0;
   HEAP32[($2_1 + 80 | 0) >> 2] = 4;
   HEAP32[($2_1 + 84 | 0) >> 2] = i64toi32_i32$1;
   $2($2_1 + 72 | 0 | 0, 1049292 | 0);
   wasm2js_trap();
  }
  $8_1 = HEAP32[($2_1 + 72 | 0) >> 2] | 0;
  $0_1 = $39(2 | 0, $1_1 | 0, $4_1 | 0) | 0;
  $37($8_1 | 0, $1_1 | 0, 1 | 0);
  $37($7_1 | 0, $5_1 | 0, 1 | 0);
  fimport$0($0_1 + 20 | 0 | 0);
  $40($0_1 | 0);
  $40($6_1 | 0);
  global$0 = $2_1 + 96 | 0;
 }
 
 function $44($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = global$0 + -64 | 0;
  global$0 = $1_1;
  $41($1_1 | 0, $0_1 | 0);
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  $0_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($1_1 + 28 | 0) >> 2] = 1;
  HEAP32[($1_1 + 24 | 0) >> 2] = 1049440;
  HEAP32[($1_1 + 36 | 0) >> 2] = 1;
  HEAP32[($1_1 + 52 | 0) >> 2] = 4;
  HEAP32[($1_1 + 56 | 0) >> 2] = $0_1 + 20 | 0;
  HEAP32[($1_1 + 60 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($1_1 + 40 | 0) >> 2] = 0;
  HEAP32[($1_1 + 32 | 0) >> 2] = $1_1 + 48 | 0;
  HEAP32[($1_1 + 48 | 0) >> 2] = $1_1 + 56 | 0;
  $45($1_1 + 12 | 0 | 0, $1_1 + 24 | 0 | 0);
  $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  $43($3_1 | 0, HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0);
  $37(HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, $3_1 | 0, 1 | 0);
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  if ($3_1 >>> 0 >= 2 >>> 0) {
   HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 - 1 | 0
  }
  $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  if ($0_1 >>> 0 >= 2 >>> 0) {
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1 - 1 | 0
  }
  global$0 = $1_1 - -64 | 0;
  return $2_1 + 20 | 0 | 0;
 }
 
 function $45($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$3 = 0, $21_1 = 0, $122 = 0, $146 = 0, $151 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $8_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
               switch ($5_1 | 0) {
               case 1:
                break label$11;
               case 0:
                break label$13;
               default:
                break label$12;
               };
              }
              if ($8_1) {
               break label$7
              }
              $21_1 = 1;
              break label$10;
             }
             $7_1 = $5_1 & 3 | 0;
             label$14 : {
              if ($5_1 >>> 0 < 4 >>> 0) {
               $5_1 = 0;
               break label$14;
              }
              $2_1 = $6_1 + 28 | 0;
              $5_1 = $5_1 & -4 | 0;
              $9_1 = $5_1;
              label$16 : while (1) {
               $3_1 = (HEAP32[$2_1 >> 2] | 0) + ((HEAP32[($2_1 - 8 | 0) >> 2] | 0) + ((HEAP32[($2_1 - 16 | 0) >> 2] | 0) + ((HEAP32[($2_1 - 24 | 0) >> 2] | 0) + $3_1 | 0) | 0) | 0) | 0;
               $2_1 = $2_1 + 32 | 0;
               $9_1 = $9_1 - 4 | 0;
               if ($9_1) {
                continue label$16
               }
               break label$16;
              };
             }
             if (!$7_1) {
              break label$8
             }
             break label$9;
            }
            if ($8_1) {
             $7_1 = $5_1 & 3 | 0;
             $5_1 = 0;
             break label$9;
            }
            $2_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
            $21_1 = HEAP32[$6_1 >> 2] | 0;
           }
           $1_1 = $21_1;
           $30($4_1 + 8 | 0 | 0, $2_1 | 0);
           $3_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
           $1_1 = $57(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
           HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
           HEAP32[$0_1 >> 2] = $3_1;
           break label$4;
          }
          $2_1 = (($5_1 << 3 | 0) + $6_1 | 0) + 4 | 0;
          label$18 : while (1) {
           $3_1 = (HEAP32[$2_1 >> 2] | 0) + $3_1 | 0;
           $2_1 = $2_1 + 8 | 0;
           $7_1 = $7_1 - 1 | 0;
           if ($7_1) {
            continue label$18
           }
           break label$18;
          };
         }
         if ($8_1) {
          if (($3_1 | 0) < (0 | 0)) {
           break label$7
          }
          if (!(HEAP32[($6_1 + 4 | 0) >> 2] | 0) & $3_1 >>> 0 < 16 >>> 0 | 0) {
           break label$7
          }
          $3_1 = $3_1 << 1 | 0;
         }
         if (($3_1 | 0) < (0 | 0)) {
          break label$3
         }
         if ($3_1) {
          break label$6
         }
        }
        $2_1 = 1;
        $3_1 = 0;
        break label$5;
       }
       HEAPU8[1049704 >> 0] | 0;
       $2_1 = $6($3_1 | 0) | 0;
       if (!$2_1) {
        break label$2
       }
      }
      HEAP32[($4_1 + 24 | 0) >> 2] = 0;
      HEAP32[($4_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($4_1 + 16 | 0) >> 2] = $3_1;
      if ($13($4_1 + 16 | 0 | 0, 1048576 | 0, $1_1 | 0) | 0) {
       break label$1
      }
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$0 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      $122 = i64toi32_i32$0;
      i64toi32_i32$0 = $0_1;
      HEAP32[$0_1 >> 2] = $122;
      HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     }
     global$0 = $4_1 + 32 | 0;
     return;
    }
    $1();
   }
   wasm2js_trap();
  }
  $0_1 = global$0 + -64 | 0;
  global$0 = $0_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 86;
  HEAP32[($0_1 + 8 | 0) >> 2] = 1048652;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1048636;
  HEAP32[($0_1 + 16 | 0) >> 2] = $4_1 + 31 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 2;
  HEAP32[($0_1 + 24 | 0) >> 2] = 1048776;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 2;
  HEAP32[($0_1 + 40 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 2;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $146 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[($0_1 + 56 | 0) >> 2] = $146;
  HEAP32[($0_1 + 60 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1 + 8 | 0;
  i64toi32_i32$2 = 3;
  i64toi32_i32$3 = 0;
  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
  $151 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 48 | 0) >> 2] = $151;
  HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$2;
  HEAP32[($0_1 + 32 | 0) >> 2] = $0_1 + 48 | 0;
  $2($0_1 + 24 | 0 | 0, 1048756 | 0);
  wasm2js_trap();
 }
 
 function $46($0_1) {
  $0_1 = $0_1 | 0;
  $58($0_1 | 0, 1049468 | 0);
 }
 
 function $47($0_1) {
  $0_1 = $0_1 | 0;
  $58($0_1 | 0, 1049488 | 0);
 }
 
 function $48($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = ($38($0_1 | 0, $1_1 | 0) | 0) + 20 | 0;
  $49(1049692 | 0, $0_1 | 0);
  return $0_1 | 0;
 }
 
 function $49($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  if (($4_1 | 0) == ($3_1 | 0)) {
   $2_1 = global$0 - 16 | 0;
   global$0 = $2_1;
   $33($2_1 + 8 | 0 | 0, $0_1 | 0, $3_1 | 0, 1 | 0, 4 | 0, 4 | 0);
   $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   if (($3_1 | 0) != (-2147483647 | 0)) {
    HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    $0($3_1 | 0);
    wasm2js_trap();
   }
   global$0 = $2_1 + 16 | 0;
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1 + 1 | 0;
  HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $1_1;
 }
 
 function $50($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1 - 16 | 0;
  HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $51($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  $0_1 = $0_1 - 20 | 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  if ($2_1 >>> 0 >= 2 >>> 0) {
   HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 - 1 | 0
  }
  HEAP32[($1_1 + 16 | 0) >> 2] = 1;
  HEAP32[($1_1 + 12 | 0) >> 2] = 1049508;
  HEAP32[($1_1 + 24 | 0) >> 2] = 1;
  HEAP32[($1_1 + 28 | 0) >> 2] = 0;
  HEAP32[($1_1 + 40 | 0) >> 2] = 1;
  HEAP32[($1_1 + 44 | 0) >> 2] = HEAP32[1049700 >> 2] | 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = $1_1 + 36 | 0;
  HEAP32[($1_1 + 36 | 0) >> 2] = $1_1 + 44 | 0;
  $45($1_1 | 0, $1_1 + 12 | 0 | 0);
  $0_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $43($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
  $37(HEAP32[$1_1 >> 2] | 0 | 0, $0_1 | 0, 1 | 0);
  global$0 = $1_1 + 48 | 0;
 }
 
 function $52() {
  var $0_1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $34_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 4;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  $1_1 = (HEAP32[1049700 >> 2] | 0) << 2 | 0;
  $2_1 = HEAP32[1049696 >> 2] | 0;
  label$1 : while (1) {
   if ($1_1) {
    label$3 : {
     $3_1 = (HEAP32[$2_1 >> 2] | 0) - 20 | 0;
     if (!(HEAP32[($3_1 + 4 | 0) >> 2] | 0)) {
      $9($3_1 | 0, 20 | 0);
      break label$3;
     }
     $49($0_1 + 4 | 0 | 0, $3_1 + 20 | 0 | 0);
    }
    $2_1 = $2_1 + 4 | 0;
    $1_1 = $1_1 - 4 | 0;
    continue label$1;
   }
   break label$1;
  };
  $37(HEAP32[1049692 >> 2] | 0 | 0, HEAP32[1049696 >> 2] | 0 | 0, 4 | 0);
  HEAP32[1049700 >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $34_1 = i64toi32_i32$0;
  i64toi32_i32$0 = 1049692;
  HEAP32[i64toi32_i32$0 >> 2] = $34_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $0_1 + 16 | 0;
 }
 
 function $53($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $54($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = 31;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  if ($1_1 >>> 0 <= 16777215 >>> 0) {
   $3_1 = Math_clz32($1_1 >>> 8 | 0);
   $2_1 = ((($1_1 >>> (6 - $3_1 | 0) | 0) & 1 | 0) - ($3_1 << 1 | 0) | 0) + 62 | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $4_1 = ($2_1 << 2 | 0) + 1049716 | 0;
  $3_1 = 1 << $2_1 | 0;
  if (!($3_1 & (HEAP32[1050128 >> 2] | 0) | 0)) {
   HEAP32[$4_1 >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[1050128 >> 2] = HEAP32[1050128 >> 2] | 0 | $3_1 | 0;
   return;
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    if (($1_1 | 0) == ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0)) {
     $2_1 = $3_1;
     break label$4;
    }
    $5_1 = $1_1 << (($2_1 | 0) != (31 | 0) ? 25 - ($2_1 >>> 1 | 0) | 0 : 0) | 0;
    label$6 : while (1) {
     $4_1 = ($3_1 + (($5_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0;
     $2_1 = HEAP32[$4_1 >> 2] | 0;
     if (!$2_1) {
      break label$3
     }
     $5_1 = $5_1 << 1 | 0;
     $3_1 = $2_1;
     if (((HEAP32[($2_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) != ($1_1 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $0_1;
  HEAP32[($0_1 + 24 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
 }
 
 function $55($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[1049712 >> 2] | 0;
  HEAP32[1049712 >> 2] = $4_1 + 1 | 0;
  label$1 : {
   if (($4_1 | 0) < (0 | 0)) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[1050172 >> 0] | 0)) {
     HEAP32[1050168 >> 2] = (HEAP32[1050168 >> 2] | 0) + 1 | 0;
     if ((HEAP32[1049708 >> 2] | 0 | 0) >= (0 | 0)) {
      break label$2
     }
     break label$1;
    }
    FUNCTION_TABLE[$1_1 | 0]($3_1 + 8 | 0, $0_1);
    wasm2js_trap();
   }
   HEAP8[1050172 >> 0] = 0;
   if (!$2_1) {
    break label$1
   }
   wasm2js_trap();
  }
  wasm2js_trap();
 }
 
 function $56($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $57($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $63 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 16 >>> 0) {
    $3_1 = $0_1;
    break label$1;
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $5_1 = $0_1 + $4_1 | 0;
   if ($4_1) {
    $3_1 = $0_1;
    $6_1 = $1_1;
    label$4 : while (1) {
     HEAP8[$3_1 >> 0] = HEAPU8[$6_1 >> 0] | 0;
     $6_1 = $6_1 + 1 | 0;
     $3_1 = $3_1 + 1 | 0;
     if ($3_1 >>> 0 < $5_1 >>> 0) {
      continue label$4
     }
     break label$4;
    };
   }
   $8_1 = $2_1 - $4_1 | 0;
   $7_1 = $8_1 & -4 | 0;
   $3_1 = $5_1 + $7_1 | 0;
   label$5 : {
    $4_1 = $1_1 + $4_1 | 0;
    if ($4_1 & 3 | 0) {
     if (($7_1 | 0) <= (0 | 0)) {
      break label$5
     }
     $2_1 = $4_1 << 3 | 0;
     $9_1 = $2_1 & 24 | 0;
     $6_1 = $4_1 & -4 | 0;
     $1_1 = $6_1 + 4 | 0;
     $2_1 = (0 - $2_1 | 0) & 24 | 0;
     $6_1 = HEAP32[$6_1 >> 2] | 0;
     label$7 : while (1) {
      $63 = $6_1 >>> $9_1 | 0;
      $6_1 = HEAP32[$1_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $63 | ($6_1 << $2_1 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $5_1 = $5_1 + 4 | 0;
      if ($5_1 >>> 0 < $3_1 >>> 0) {
       continue label$7
      }
      break label$7;
     };
     break label$5;
    }
    if (($7_1 | 0) <= (0 | 0)) {
     break label$5
    }
    $1_1 = $4_1;
    label$8 : while (1) {
     HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $5_1 = $5_1 + 4 | 0;
     if ($5_1 >>> 0 < $3_1 >>> 0) {
      continue label$8
     }
     break label$8;
    };
   }
   $2_1 = $8_1 & 3 | 0;
   $1_1 = $4_1 + $7_1 | 0;
  }
  if ($2_1) {
   $2_1 = $2_1 + $3_1 | 0;
   label$10 : while (1) {
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $3_1 = $3_1 + 1 | 0;
    if ($3_1 >>> 0 < $2_1 >>> 0) {
     continue label$10
    }
    break label$10;
   };
  }
  return $0_1 | 0;
 }
 
 function $58($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  $41($2_1 | 0, $0_1 | 0);
  $5_1 = HEAP32[$2_1 >> 2] | 0;
  $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 28 | 0) >> 2] = 1;
  HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($2_1 + 36 | 0) >> 2] = 1;
  HEAP32[($2_1 + 52 | 0) >> 2] = 4;
  HEAP32[($2_1 + 56 | 0) >> 2] = $0_1 + 20 | 0;
  HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($2_1 + 40 | 0) >> 2] = 0;
  HEAP32[($2_1 + 32 | 0) >> 2] = $2_1 + 48 | 0;
  HEAP32[($2_1 + 48 | 0) >> 2] = $2_1 + 56 | 0;
  $45($2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0);
  $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
  $43($4_1 | 0, HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0);
  $37(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0, 1 | 0);
  $42($5_1 | 0, $0_1 | 0);
  global$0 = $2_1 - -64 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140 = 0, $140$hi = 0, $142$hi = 0, $144 = 0, $144$hi = 0, $151 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              i64toi32_i32$1 = var$1$hi;
              var$3 = var$1;
              if (!var$3) {
               break label$11
              }
              i64toi32_i32$0 = var$3;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
               i64toi32_i32$2 = 0;
               $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
               i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$4 = $38_1;
              if (!var$4) {
               break label$9
              }
              var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
              if (var$2 >>> 0 <= 31 >>> 0) {
               break label$8
              }
              break label$2;
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = i64toi32_i32$2;
             i64toi32_i32$1 = i64toi32_i32$2;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      i64toi32_i32$2 = var$1$hi;
      i64toi32_i32$1 = var$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      var$8 = i64toi32_i32$4;
      var$8$hi = i64toi32_i32$5;
      label$15 : while (1) {
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$2 = var$5;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        $45_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
        $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       }
       $140 = $45_1;
       $140$hi = i64toi32_i32$1;
       i64toi32_i32$1 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
       }
       $142$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $140$hi;
       i64toi32_i32$1 = $140;
       i64toi32_i32$5 = $142$hi;
       i64toi32_i32$0 = $46_1;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       var$5$hi = i64toi32_i32$5;
       $144 = var$5;
       $144$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$2 = var$8;
       i64toi32_i32$1 = var$5$hi;
       i64toi32_i32$0 = var$5;
       i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       var$6 = $47_1;
       var$6$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$2 = var$6$hi;
       i64toi32_i32$4 = var$6;
       i64toi32_i32$5 = var$1$hi;
       i64toi32_i32$0 = var$1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $151 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
       $151$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $144$hi;
       i64toi32_i32$2 = $144;
       i64toi32_i32$4 = $151$hi;
       i64toi32_i32$0 = $151;
       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
       var$5 = i64toi32_i32$1;
       var$5$hi = i64toi32_i32$3;
       i64toi32_i32$3 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        $48_1 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       }
       $154$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$7$hi;
       i64toi32_i32$2 = $154$hi;
       i64toi32_i32$3 = $48_1;
       i64toi32_i32$5 = var$7$hi;
       i64toi32_i32$0 = var$7;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       var$0$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$6$hi;
       i64toi32_i32$2 = var$6;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       var$6$hi = i64toi32_i32$3;
       var$7 = var$6;
       var$7$hi = i64toi32_i32$3;
       var$2 = var$2 + -1 | 0;
       if (var$2) {
        continue label$15
       }
       break label$15;
      };
      break label$13;
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = [null, $19, $25, $24, $35, $53, $56, $8, $10, $11, $12, $7, $26, $27, $28];
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "memory": Object.create(Object.prototype, {
   "grow": {
    "value": __wasm_memory_grow
   }, 
   "buffer": {
    "get": function () {
     return buffer;
    }
    
   }
  }), 
  "execute": $44, 
  "setEnvironment": $46, 
  "onDeploy": $47, 
  "__new": $48, 
  "__pin": $50, 
  "__unpin": $51, 
  "__collect": $52, 
  "__data_end": {
   get value() {
    return global$1;
   }, 
   set value(_global$1) {
    global$1 = _global$1;
   }
  }, 
  "__heap_base": {
   get value() {
    return global$2;
   }, 
   set value(_global$2) {
    global$2 = _global$2;
   }
  }
 };
}

var retasmFunc = asmFunc({
  "env": env,
});
export var memory = retasmFunc.memory;
export var execute = retasmFunc.execute;
export var setEnvironment = retasmFunc.setEnvironment;
export var onDeploy = retasmFunc.onDeploy;
export var __new = retasmFunc.__new;
export var __pin = retasmFunc.__pin;
export var __unpin = retasmFunc.__unpin;
export var __collect = retasmFunc.__collect;
export var __data_end = retasmFunc.__data_end;
export var __heap_base = retasmFunc.__heap_base;
